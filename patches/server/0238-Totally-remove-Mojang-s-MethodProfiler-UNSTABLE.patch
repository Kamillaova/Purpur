From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kamillaova <54859825+Kamillaova@users.noreply.github.com>
Date: Mon, 30 Jan 2023 22:16:59 +0300
Subject: [PATCH] Totally remove Mojang's MethodProfiler, UNSTABLE


diff --git a/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java b/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
index 6b07c7107156669aaefcf1b8ff21277a876b001b..cc91fe0f60bbe892d6b833dc9ea72bb51a038f8a 100644
--- a/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
+++ b/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
@@ -278,16 +278,12 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
         com.tuinity.tuinity.util.TickThread.softEnsureTickThread("async tick list tick"); // Tuinity - soft async catcher
         final ChunkProviderServer chunkProvider = this.world.getChunkProvider();
 
-        this.world.getMethodProfiler().enter("cleaning");
-
         this.prepare();
 
         // this must be done here in case something schedules in the tick code
         this.shortScheduled[this.shortScheduledIndex].clear();
         this.shortScheduledIndex = getNextIndex(this.shortScheduledIndex, SHORT_SCHEDULE_TICK_THRESHOLD);
 
-        this.world.getMethodProfiler().exitEnter("ticking");
-
         for (final NextTickListEntry<T> toTick : this.toTickThisTick) {
             if (toTick.tickState != STATE_PENDING_TICK) {
                 // onTickEnd gets called at end of tick
@@ -317,8 +313,6 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
             }
         }
 
-        this.world.getMethodProfiler().exit();
-
         // finished ticking, actual cleanup time
         for (int i = 0, len = this.toTickThisTick.size(); i < len; ++i) {
             final NextTickListEntry<T> entry = this.toTickThisTick.poll();
diff --git a/src/main/java/net/minecraft/commands/CommandDispatcher.java b/src/main/java/net/minecraft/commands/CommandDispatcher.java
index 85095fcb2350711ded85196237e8e3ba335eb153..9e5ab7527cf08b243667d212c4d6cab7357609df 100644
--- a/src/main/java/net/minecraft/commands/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/commands/CommandDispatcher.java
@@ -269,11 +269,8 @@ public class CommandDispatcher {
             stringreader.skip();
         }
 
-        commandlistenerwrapper.getServer().getMethodProfiler().enter(s);
-
         byte b0;
 
-        try {
             byte b1;
 
             try {
@@ -331,9 +328,6 @@ public class CommandDispatcher {
 
                 b0 = 0;
             }
-        } finally {
-            commandlistenerwrapper.getServer().getMethodProfiler().exit();
-        }
 
         return b0;
     }
diff --git a/src/main/java/net/minecraft/server/AdvancementDataWorld.java b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
index c0afe75e0532d510d4612314c0ccc2a1894c5fb4..e94293355f713a37bc550c344d04affb21248f08 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataWorld.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
@@ -19,7 +19,6 @@ import net.minecraft.resources.MinecraftKey;
 import net.minecraft.server.packs.resources.IResourceManager;
 import net.minecraft.server.packs.resources.ResourceDataJson;
 import net.minecraft.util.ChatDeserializer;
-import net.minecraft.util.profiling.GameProfilerFiller;
 import net.minecraft.world.level.storage.loot.LootPredicateManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -36,7 +35,7 @@ public class AdvancementDataWorld extends ResourceDataJson {
         this.d = lootpredicatemanager;
     }
 
-    protected void a(Map<MinecraftKey, JsonElement> map, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller) {
+    protected void a(Map<MinecraftKey, JsonElement> map, IResourceManager iresourcemanager) {
         Map<MinecraftKey, Advancement.SerializedAdvancement> map1 = Maps.newHashMap();
 
         map.forEach((minecraftkey, jsonelement) -> {
diff --git a/src/main/java/net/minecraft/server/CustomFunctionData.java b/src/main/java/net/minecraft/server/CustomFunctionData.java
index 21f5474a1cd60168ca059da542a432d40d88b514..c55f35cd122b9fd1dca254e984e0bde2c3823e65 100644
--- a/src/main/java/net/minecraft/server/CustomFunctionData.java
+++ b/src/main/java/net/minecraft/server/CustomFunctionData.java
@@ -51,7 +51,6 @@ public class CustomFunctionData {
     }
 
     private void a(Collection<CustomFunction> collection, MinecraftKey minecraftkey) {
-        this.server.getMethodProfiler().a(minecraftkey::toString);
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext()) {
@@ -59,8 +58,6 @@ public class CustomFunctionData {
 
             this.a(customfunction, this.e());
         }
-
-        this.server.getMethodProfiler().exit();
     }
 
     public int a(CustomFunction customfunction, CommandListenerWrapper commandlistenerwrapper) {
@@ -90,10 +87,8 @@ public class CustomFunctionData {
                         return j;
                     }
 
-                    try {
                         CustomFunctionData.a customfunctiondata_a = (CustomFunctionData.a) this.e.removeFirst();
 
-                        this.server.getMethodProfiler().a(customfunctiondata_a::toString);
                         customfunctiondata_a.a(this.e, i);
                         if (!this.f.isEmpty()) {
                             List list = Lists.reverse(this.f);
@@ -103,9 +98,6 @@ public class CustomFunctionData {
                             list.forEach(arraydeque::addFirst);
                             this.f.clear();
                         }
-                    } finally {
-                        this.server.getMethodProfiler().exit();
-                    }
 
                     ++k;
                 } while (k < i);
diff --git a/src/main/java/net/minecraft/server/CustomFunctionManager.java b/src/main/java/net/minecraft/server/CustomFunctionManager.java
index 7deacf34ae4d673e9d083ddc67176b741790f68a..e283b0410da4beb87901e806296259838f1f402d 100644
--- a/src/main/java/net/minecraft/server/CustomFunctionManager.java
+++ b/src/main/java/net/minecraft/server/CustomFunctionManager.java
@@ -67,7 +67,7 @@ public class CustomFunctionManager implements IReloadListener {
     }
 
     @Override
-    public CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller, GameProfilerFiller gameprofilerfiller1, Executor executor, Executor executor1) {
+    public CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, Executor executor, Executor executor1) {
         CompletableFuture<Map<MinecraftKey, Tag.a>> completablefuture = this.e.a(iresourcemanager, executor);
         CompletableFuture<Map<MinecraftKey, CompletableFuture<CustomFunction>>> completablefuture1 = CompletableFuture.supplyAsync(() -> {
             return iresourcemanager.a("functions", (s) -> {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index f0d8fbd81766a5950a77e9fa72234d586acde117..7cb67162f732e2b36973ae6cfb320d63e48b9f3f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -196,8 +196,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     public final WorldNBTStorage worldNBTStorage;
     private final MojangStatisticsGenerator snooper = new MojangStatisticsGenerator("server", this, SystemUtils.getMonotonicMillis());
     private final List<Runnable> tickables = Lists.newArrayList();
-    private final GameProfilerSwitcher m;
-    private GameProfilerFiller methodProfiler;
     private ServerConnection serverConnection;
     public final WorldLoadListenerFactory worldLoadListenerFactory;
     private final ServerPing serverPing;
@@ -236,7 +234,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     private String L;
     private volatile boolean hasTicked;
     private long lastOverloadTime;
-    private boolean O;
     private boolean P;
     private final MinecraftSessionService minecraftSessionService;
     private final GameProfileRepository gameProfileRepository;
@@ -308,8 +305,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     public MinecraftServer(OptionSet options, DataPackConfiguration datapackconfiguration, Thread thread, IRegistryCustom.Dimension iregistrycustom_dimension, Convertable.ConversionSession convertable_conversionsession, SaveData savedata, ResourcePackRepository resourcepackrepository, Proxy proxy, DataFixer datafixer, DataPackResources datapackresources, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache, WorldLoadListenerFactory worldloadlistenerfactory) {
         super("Server");
         SERVER = this; // Paper - better singleton
-        this.m = new GameProfilerSwitcher(SystemUtils.a, this::ai);
-        this.methodProfiler = GameProfilerDisabled.a;
         this.serverPing = new ServerPing();
         this.r = new Random();
         this.serverPort = -1;
@@ -1143,13 +1138,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                     //MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit // Paper - don't overwrite current tick time
                     lastTick = curTime;
                     this.nextTick += 50L;
-                    GameProfilerTick gameprofilertick = GameProfilerTick.a("Server");
-
-                    this.a(gameprofilertick);
-                    this.methodProfiler.a();
-                    this.methodProfiler.enter("tick");
                     this.a(this::canSleepForTick);
-                    this.methodProfiler.exitEnter("nextTickWait");
                     this.X = true;
                     // Purpur start - tps catchup
                     if (net.pl3x.purpur.PurpurConfig.tpsCatchup) {
@@ -1159,9 +1148,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                     }
                     // Purpur end - tps catchup
                     this.sleepForTick();
-                    this.methodProfiler.exit();
-                    this.methodProfiler.b();
-                    this.b(gameprofilertick);
                     this.hasTicked = true;
                 }
             } else {
@@ -1361,7 +1347,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     }
 
     protected void c(TickTask ticktask) {
-        this.getMethodProfiler().c("runTask");
         super.executeTask(ticktask);
     }
 
@@ -1440,7 +1425,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 playerSaveInterval = autosavePeriod;
             }
             // Paper end
-            this.methodProfiler.enter("save");
             if (playerSaveInterval > 0) { // Paper
             this.playerList.savePlayers(playerSaveInterval); // Paper
             }// Paper
@@ -1452,11 +1436,9 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             }
             // Paper end
 
-            this.methodProfiler.exit();
             //MinecraftServer.LOGGER.debug("Autosave finished"); // Paper
         //} // Paper
 
-        this.methodProfiler.enter("snooper");
         if (((DedicatedServer) this).getDedicatedServerProperties().snooperEnabled && !this.snooper.d() && this.ticks > 100) { // Spigot
             this.snooper.a();
         }
@@ -1465,8 +1447,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             this.snooper.b();
         }
 
-        this.methodProfiler.exit();
-
         this.executeAll();
 
         com.tuinity.tuinity.util.CachedLists.reset(); // Tuinity
@@ -1477,7 +1457,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.ticks, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
         // Paper end
 
-        this.methodProfiler.enter("tallying");
         long l = this.h[this.ticks % 100] = SystemUtils.getMonotonicNanos() - i;
 
         this.ag = this.ag * 0.8F + (float) l / 1000000.0F * 0.19999999F;
@@ -1490,7 +1469,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         // Paper end
 
         this.circularTimer.a(i1 - i);
-        this.methodProfiler.exit();
         org.spigotmc.WatchdogThread.tick(); // Spigot
         this.slackActivityAccountant.tickEnded(l); // Spigot
     }
@@ -1499,10 +1477,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         // Tuinity - replace logic
         this.server.getScheduler().mainThreadHeartbeat(this.ticks); // CraftBukkit
         // Tuinity - replace logic
-        this.methodProfiler.enter("commandFunctions");
         this.getFunctionData().tick();
         // Tuinity - replace logic
-        this.methodProfiler.exitEnter("levels");
         Iterator iterator = this.getWorlds().iterator();
 
         // CraftBukkit start
@@ -1538,9 +1514,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             worldserver.hasRidableMoveEvent = net.pl3x.purpur.event.entity.RidableMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Purpur
             TileEntityHopper.skipHopperEvents = worldserver.paperConfig.disableHopperMoveEvents || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0; // Paper
 
-            this.methodProfiler.a(() -> {
-                return worldserver + " " + worldserver.getDimensionKey().a();
-            });
             /* Drop global time updates
             if (this.ticks % 20 == 0) {
                 this.methodProfiler.enter("timeSync");
@@ -1549,8 +1522,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             }
             // CraftBukkit end */
 
-            this.methodProfiler.enter("tick");
-
             try {
                 // Tuinity - replace logic
                 worldserver.doTick(booleansupplier);
@@ -1575,26 +1546,18 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 throw new ReportedException(crashreport);
             }
 
-            this.methodProfiler.exit();
-            this.methodProfiler.exit();
             worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
         }
 
-        this.methodProfiler.exitEnter("connection");
         this.getServerConnection().c();
-        this.methodProfiler.exitEnter("players");
         this.playerList.tick();
         if (SharedConstants.d) {
             GameTestHarnessTicker.a.b();
         }
 
-        this.methodProfiler.exitEnter("server gui refresh");
-
         for (int i = 0; i < this.tickables.size(); ++i) {
             ((Runnable) this.tickables.get(i)).run();
         }
-
-        this.methodProfiler.exit();
     }
 
     public boolean getAllowNether() {
@@ -2197,10 +2160,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         }
     }
 
-    public GameProfilerFiller getMethodProfiler() {
-        return this.methodProfiler;
-    }
-
     public abstract boolean a(GameProfile gameprofile);
 
     public void a(Path path) throws IOException {
@@ -2411,38 +2370,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     }
     // CraftBukkit end
 
-    private void a(@Nullable GameProfilerTick gameprofilertick) {
-        if (this.O) {
-            this.O = false;
-            this.m.c();
-        }
-
-        this.methodProfiler = GameProfilerTick.a(this.m.d(), gameprofilertick);
-    }
-
-    private void b(@Nullable GameProfilerTick gameprofilertick) {
-        if (gameprofilertick != null) {
-            gameprofilertick.b();
-        }
-
-        this.methodProfiler = this.m.d();
-    }
-
-    public boolean aS() {
-        return this.m.a();
-    }
-
-    public void aT() {
-        this.O = true;
-    }
-
-    public MethodProfilerResults aU() {
-        MethodProfilerResults methodprofilerresults = this.m.e();
-
-        this.m.b();
-        return methodprofilerresults;
-    }
-
     public Path a(SavedFile savedfile) {
         return this.convertable.getWorldFolder(savedfile);
     }
diff --git a/src/main/java/net/minecraft/server/aci.java b/src/main/java/net/minecraft/server/aci.java
index 6d83ee68e512a21cc2681457fda105750410ec88..34ed6e11bb7f3b22e330659b6c9097bf6a405dc4 100644
--- a/src/main/java/net/minecraft/server/aci.java
+++ b/src/main/java/net/minecraft/server/aci.java
@@ -5,18 +5,13 @@ import java.util.concurrent.Executor;
 import net.minecraft.server.packs.resources.IReloadListener;
 import net.minecraft.server.packs.resources.IResourceManager;
 import net.minecraft.util.Unit;
-import net.minecraft.util.profiling.GameProfilerFiller;
 
 public interface aci extends IReloadListener {
 
     @Override
-    default CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller, GameProfilerFiller gameprofilerfiller1, Executor executor, Executor executor1) {
+    default CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, Executor executor, Executor executor1) {
         return ireloadlistener_a.a(Unit.INSTANCE).thenRunAsync(() -> {
-            gameprofilerfiller1.a();
-            gameprofilerfiller1.enter("listener");
             this.a(iresourcemanager);
-            gameprofilerfiller1.exit();
-            gameprofilerfiller1.b();
         }, executor1);
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkProviderServer.java b/src/main/java/net/minecraft/server/level/ChunkProviderServer.java
index 9cf2de63a5a0f21828c236cbb1f7ef5b4dac5de1..6783ff25d52502d716021d56d4a92d693c5567ed 100644
--- a/src/main/java/net/minecraft/server/level/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/level/ChunkProviderServer.java
@@ -27,7 +27,6 @@ import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.progress.WorldLoadListener;
 import net.minecraft.util.MathHelper;
-import net.minecraft.util.profiling.GameProfilerFiller;
 import net.minecraft.util.thread.IAsyncTaskHandler;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ai.village.poi.VillagePlace;
@@ -672,9 +671,6 @@ public class ChunkProviderServer extends IChunkProvider {
                 return ifLoaded;
             }
             // Paper end
-            GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
-
-            gameprofilerfiller.c("getChunk");
             long k = ChunkCoordIntPair.pair(i, j);
 
             IChunkAccess ichunkaccess;
@@ -688,7 +684,6 @@ public class ChunkProviderServer extends IChunkProvider {
                 }
             }
 
-            gameprofilerfiller.c("getChunkCacheMiss");
             CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> completablefuture = this.getChunkFutureMainThread(i, j, chunkstatus, flag, true); // Paper
 
             if (!completablefuture.isDone()) { // Paper
@@ -762,13 +757,9 @@ public class ChunkProviderServer extends IChunkProvider {
             this.chunkMapDistance.addTicketAtLevel(TicketType.REQUIRED_LOAD, chunkcoordintpair, l, identifier); // Tuinity - prevent plugin unloads from removing our ticket
             if (isUrgent) this.chunkMapDistance.markUrgent(chunkcoordintpair); // Paper
             if (this.a(playerchunk, l)) {
-                GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
-
-                gameprofilerfiller.enter("chunkLoad");
                 chunkMapDistance.delayDistanceManagerTick = false; // Paper - ensure this is never false
                 this.tickDistanceManager();
                 playerchunk = this.getChunk(k);
-                gameprofilerfiller.exit();
                 if (this.a(playerchunk, l)) {
                     this.chunkMapDistance.removeTicketAtLevel(TicketType.REQUIRED_LOAD, chunkcoordintpair, l, identifier); // Tuinity
                     throw (IllegalStateException) SystemUtils.c((Throwable) (new IllegalStateException("No chunk holder after ticket has been added")));
@@ -921,28 +912,21 @@ public class ChunkProviderServer extends IChunkProvider {
     // CraftBukkit start - modelled on below
     public void purgeUnload() {
         if (true) return; // Tuinity - tickets will be removed later, this behavior isn't really well accounted for by the chunk system
-        this.world.getMethodProfiler().enter("purge");
         this.chunkMapDistance.purgeTickets();
         this.tickDistanceManager();
-        this.world.getMethodProfiler().exitEnter("unload");
         this.playerChunkMap.unloadChunks(() -> true);
-        this.world.getMethodProfiler().exit();
         this.clearCache();
     }
     // CraftBukkit end
 
     public void tick(BooleanSupplier booleansupplier) {
-        this.world.getMethodProfiler().enter("purge");
         this.chunkMapDistance.purgeTickets();
         // Tuinity - replace logic
         this.tickDistanceManager();
-        this.world.getMethodProfiler().exitEnter("chunks");
         this.playerChunkMap.playerChunkManager.tick(); // Tuinity - this is mostly is to account for view distance changes
         this.tickChunks();
-        this.world.getMethodProfiler().exitEnter("unload");
         this.playerChunkMap.unloadChunks(booleansupplier);
         // Tuinity - replace logic
-        this.world.getMethodProfiler().exit();
         this.clearCache();
     }
 
@@ -987,11 +971,9 @@ public class ChunkProviderServer extends IChunkProvider {
                 player.playerNaturallySpawnedEvent = event;
             }
             // Paper end - optimize isOutisdeRange
-            this.world.getMethodProfiler().enter("pollingChunks");
             int k = this.world.getGameRules().getInt(GameRules.RANDOM_TICK_SPEED);
             boolean flag2 = world.ticksPerAnimalSpawns != 0L && worlddata.getTime() % world.ticksPerAnimalSpawns == 0L; // CraftBukkit
 
-            this.world.getMethodProfiler().enter("naturalSpawnCount");
             int l = this.chunkMapDistance.b();
             // Paper start - per player mob spawning
             SpawnerCreature.d spawnercreature_d; // moved down
@@ -1011,7 +993,6 @@ public class ChunkProviderServer extends IChunkProvider {
             int ticked = 0; // Tuinity - exec chunk tasks during world tick
 
             this.p = spawnercreature_d;
-            this.world.getMethodProfiler().exit();
             //List<PlayerChunk> list = Lists.newArrayList(this.playerChunkMap.f()); // Paper
             //Collections.shuffle(list); // Paper
             // Paper - moved up
@@ -1023,9 +1004,7 @@ public class ChunkProviderServer extends IChunkProvider {
                 PlayerChunk playerchunk = chunk.playerChunk;
                 if (playerchunk != null) { // make sure load event has been called along with the load logic we put there
                     // Tuinity end - optimise chunk tick iteration
-                    this.world.getMethodProfiler().enter("broadcast");
                     playerchunk.a(chunk); // Tuinity
-                    this.world.getMethodProfiler().exit();
                     // Tuinity
 
                     if (true) { // Tuinity
@@ -1050,13 +1029,9 @@ public class ChunkProviderServer extends IChunkProvider {
                 iterator.finishedIterating();
             }
             // Tuinity end - optimise chunk tick iteration
-            this.world.getMethodProfiler().enter("customSpawners");
             if (flag1) {
                 this.world.doMobSpawning(this.allowMonsters, this.allowAnimals);
             }
-
-            this.world.getMethodProfiler().exit();
-            this.world.getMethodProfiler().exit();
         }
 
         // Tuinity start - controlled flush for entity tracker packets
@@ -1215,7 +1190,6 @@ public class ChunkProviderServer extends IChunkProvider {
 
         @Override
         protected void executeTask(Runnable runnable) {
-            ChunkProviderServer.this.world.getMethodProfiler().c("runTask");
             super.executeTask(runnable);
         }
         // Tuinity - replace logic
diff --git a/src/main/java/net/minecraft/server/level/EntityPlayer.java b/src/main/java/net/minecraft/server/level/EntityPlayer.java
index 6d67eff4d584c287c97dfe32832c87bb59725bee..03365175be78ff2d5b5d2e9e39130c0fe756737b 100644
--- a/src/main/java/net/minecraft/server/level/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/level/EntityPlayer.java
@@ -1265,7 +1265,6 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             ShapeDetectorShape shapedetectorshape = this.a(worldserver);
 
             if (shapedetectorshape != null) {
-                worldserver1.getMethodProfiler().enter("moving");
                 worldserver = shapedetectorshape.world; // CraftBukkit
                 if (worldserver == null) { } else // CraftBukkit - empty to fall through to null to event
                 if (resourcekey == DimensionManager.OVERWORLD && worldserver.getTypeKey() == DimensionManager.THE_NETHER) { // CraftBukkit
@@ -1288,8 +1287,6 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             worldserver = ((CraftWorld) exit.getWorld()).getHandle();
             // CraftBukkit end
 
-            worldserver1.getMethodProfiler().exit();
-            worldserver1.getMethodProfiler().enter("placing");
             if (true) { // CraftBukkit
                 this.worldChangeInvuln = true; // CraftBukkit - Set teleport invulnerability only if player changing worlds
 
@@ -1307,7 +1304,6 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 worldserver.addPlayerPortal(this);
                 this.playerConnection.teleport(exit); // CraftBukkit - use internal teleport without event
                 this.playerConnection.syncPosition(); // CraftBukkit - sync position after changing it (from PortalTravelAgent#findAndteleport)
-                worldserver1.getMethodProfiler().exit();
                 this.triggerDimensionAdvancements(worldserver1);
                 this.playerInteractManager.a(worldserver);
                 this.playerConnection.sendPacket(new PacketPlayOutAbilities(this.abilities));
diff --git a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
index 0406d1f2bdccda411b4c9394be70ee335d59fdb4..d4a1b7074ccf4a1228400c4629dc94fea4e57fea 100644
--- a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
@@ -1015,16 +1015,10 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     public static final double UNLOAD_QUEUE_RESIZE_FACTOR = 0.90; // Spigot // Paper - unload more // Tuinity - private -> public
 
     protected void unloadChunks(BooleanSupplier booleansupplier) {
-        GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
-
-        gameprofilerfiller.enter("poi");
         this.m.a(booleansupplier);
-        gameprofilerfiller.exitEnter("chunk_unload");
         if (!this.world.isSavingDisabled()) {
             this.b(booleansupplier);
         }
-
-        gameprofilerfiller.exit();
     }
 
     private void b(BooleanSupplier booleansupplier) {
@@ -1241,7 +1235,6 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         // Paper start - Async chunk io
         final java.util.function.BiFunction<ChunkRegionLoader.InProgressChunkHolder, Throwable, Either<IChunkAccess, PlayerChunk.Failure>> syncLoadComplete = (chunkHolder, ioThrowable) -> {
             try { // Paper
-                this.world.getMethodProfiler().c("chunkLoad");
                 // Paper start
                 if (ioThrowable != null) {
                     com.destroystokyo.paper.util.SneakyThrow.sneaky(ioThrowable);
@@ -1329,9 +1322,6 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             return this.a(chunkstatus, i);
         });
 
-        this.world.getMethodProfiler().c(() -> {
-            return "chunkGenerate " + chunkstatus.d();
-        });
         return completablefuture.thenComposeAsync((either) -> {
             return either.map((list) -> { // Paper - Shut up.
                 try {
@@ -1570,7 +1560,6 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     }
                 }
 
-                this.world.getMethodProfiler().c("chunkSave");
                 NBTTagCompound nbttagcompound;
                     nbttagcompound = ChunkRegionLoader.saveChunk(this.world, ichunkaccess);
 
diff --git a/src/main/java/net/minecraft/server/level/WorldServer.java b/src/main/java/net/minecraft/server/level/WorldServer.java
index c80af54e6a036609bcd890eebe4780705b5de185..6bba27cb8485e5b5f3ce1ea5a891e23f7113659d 100644
--- a/src/main/java/net/minecraft/server/level/WorldServer.java
+++ b/src/main/java/net/minecraft/server/level/WorldServer.java
@@ -533,7 +533,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
     // Add env and gen to constructor, WorldData -> WorldDataServer
     public WorldServer(MinecraftServer minecraftserver, Executor executor, Convertable.ConversionSession convertable_conversionsession, IWorldDataServer iworlddataserver, ResourceKey<World> resourcekey, DimensionManager dimensionmanager, WorldLoadListener worldloadlistener, ChunkGenerator chunkgenerator, boolean flag, long i, List<MobSpawner> list, boolean flag1, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
-        super(iworlddataserver, resourcekey, dimensionmanager, minecraftserver::getMethodProfiler, false, flag, i, gen, env, executor); // Paper pass executor
+        super(iworlddataserver, resourcekey, dimensionmanager, false, flag, i, gen, env, executor); // Paper pass executor
         this.pvpMode = minecraftserver.getPVP();
         convertable = convertable_conversionsession;
         uuid = WorldUUID.getUUID(convertable_conversionsession.folder.toFile());
@@ -910,7 +910,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
     }
 
     public void doTick(BooleanSupplier booleansupplier) {
-        GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
         // Tuinity start - optimise checkDespawn
         this.playersAffectingSpawning.clear();
         for (EntityPlayer player : this.getPlayers()) {
@@ -921,9 +920,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         // Tuinity end - optimise checkDespawn
 
         this.ticking = true;
-        gameprofilerfiller.enter("world border");
         this.getWorldBorder().s();
-        gameprofilerfiller.exitEnter("weather");
         boolean flag = this.isRaining();
 
         if (this.getDimensionManager().hasSkyLight()) {
@@ -1056,22 +1053,17 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
         this.Q();
         this.b();
-        gameprofilerfiller.exitEnter("chunkSource");
         this.getChunkProvider().tick(booleansupplier);
-        gameprofilerfiller.exitEnter("tickPending");
         if (!this.isDebugWorld()) {
             this.nextTickListBlock.b();
             this.nextTickListFluid.b();
         }
 
         // Tuinity - replace logic
-        gameprofilerfiller.exitEnter("raid");
         this.persistentRaid.a();
-        gameprofilerfiller.exitEnter("blockEvents");
         this.ak();
         // Tuinity - replace logic
         this.ticking = false;
-        gameprofilerfiller.exitEnter("entities");
         boolean flag3 = true || !this.players.isEmpty() || !this.getForceLoadedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
 
         if (flag3) {
@@ -1101,7 +1093,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 }
                 // CraftBukkit end */
 
-                gameprofilerfiller.enter("checkDespawn");
                 if (!entity.dead) {
                     entity.checkDespawn();
                     // Tuinity start - optimise notify()
@@ -1115,7 +1106,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                     // Tuinity end - optimise notify()
                 }
 
-                gameprofilerfiller.exit();
                 if (entity1 != null) {
                     if (!entity1.dead && entity1.w(entity)) {
                         continue;
@@ -1124,13 +1114,10 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                     entity.stopRiding();
                 }
 
-                gameprofilerfiller.enter("tick");
                 if (!entity.dead && !(entity instanceof EntityComplexPart)) {
                     this.a(this::entityJoinedWorld, entity);
                 }
 
-                gameprofilerfiller.exit();
-                gameprofilerfiller.enter("remove");
                 if (entity.dead) {
                     this.removeEntityFromChunk(entity);
                     this.entitiesById.remove(entity.getId()); // Tuinity
@@ -1143,8 +1130,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                     this.removeNavigatorsFromData(entity);
                 }
                 // Tuinity end - optimise notify()
-
-                gameprofilerfiller.exit();
             }
 
             objectiterator.finishedIterating(); // Tuinity
@@ -1171,8 +1156,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             // Tuinity - replace logic
             this.tickBlockEntities();
         }
-
-        gameprofilerfiller.exit();
     }
 
     protected void b() {
@@ -1244,9 +1227,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         boolean flag = this.isRaining();
         int j = chunkcoordintpair.d();
         int k = chunkcoordintpair.e();
-        GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
-        gameprofilerfiller.enter("thunder");
         final BlockPosition.MutableBlockPosition blockposition = this.chunkTickMutablePosition; // Paper - use mutable to reduce allocation rate, final to force compile fail on change
 
         if (!this.paperConfig.disableThunder && flag && this.W() && this.random.nextInt(100000) == 0) { // Paper - Disable thunder
@@ -1278,7 +1259,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             }
         }
 
-        gameprofilerfiller.exitEnter("iceandsnow");
         if (!this.paperConfig.disableIceAndSnow && this.randomTickRandom.nextInt(16) == 0) { // Paper - Disable ice and snow // Paper - optimise random ticking
             // Paper start - optimise chunk ticking
             // Tuinity start - optimise chunk ice snow ticking
@@ -1313,10 +1293,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         }
 
         // Paper start - optimise random block ticking
-        gameprofilerfiller.exit();
         if (i > 0) {
-            gameprofilerfiller.enter("randomTick");
-
             ChunkSection[] sections = chunk.getSections();
 
             for (int sectionIndex = 0; sectionIndex < 16; ++sectionIndex) {
@@ -1349,7 +1326,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                     // TODO CHECK ON UPDATE
                 }
             }
-            gameprofilerfiller.exit();
             // Paper end
         }
     }
@@ -1484,17 +1460,11 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             entity.lastPitch = entity.pitch;
             if (entity.inChunk) {
                 ++entity.ticksLived;
-                GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
-                gameprofilerfiller.a(() -> {
-                    return IRegistry.ENTITY_TYPE.getKey(entity.getEntityType()).toString();
-                });
-                gameprofilerfiller.c("tickNonPassenger");
                 if (isActive) { // Paper - EAR 2
                 entity.tick();
                 entity.postTick(); // CraftBukkit
                 } else { entity.inactiveTick(); } // Paper - EAR 2
-                gameprofilerfiller.exit();
             }
 
             this.chunkCheck(entity);
@@ -1530,12 +1500,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 entity1.lastPitch = entity1.pitch;
                 if (entity1.inChunk) {
                     ++entity1.ticksLived;
-                    GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
-                    gameprofilerfiller.a(() -> {
-                        return IRegistry.ENTITY_TYPE.getKey(entity1.getEntityType()).toString();
-                    });
-                    gameprofilerfiller.c("tickPassenger");
                     // Paper start - EAR 2
                     if (isActive) {
                     entity1.passengerTick();
@@ -1547,7 +1512,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                         entity.syncPositionOf(entity1);
                     }
                     // Paper end - EAR 2
-                    gameprofilerfiller.exit();
                 }
 
                 this.chunkCheck(entity1);
@@ -1569,7 +1533,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
     public void chunkCheck(Entity entity) {
         if (entity.cl()) {
-            this.getMethodProfiler().enter("chunkCheck");
             int i = MathHelper.floor(entity.locX() / 16.0D);
             int j =  Math.min(15, Math.max(0, MathHelper.floor(entity.locY() / 16.0D))); // Paper - stay consistent with chunk add/remove behavior
             int k = MathHelper.floor(entity.locZ() / 16.0D);
@@ -1641,8 +1604,6 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 }
                 // Tuinity end
             }
-
-            this.getMethodProfiler().exit();
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/network/PlayerConnection.java b/src/main/java/net/minecraft/server/network/PlayerConnection.java
index 7b7360d900bd8f58abe0eaea228e9e2b7d684e82..65eca08942d7e65d733a9b08392ec7b0a0636e0c 100644
--- a/src/main/java/net/minecraft/server/network/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/network/PlayerConnection.java
@@ -361,7 +361,6 @@ public class PlayerConnection implements PacketListenerPlayIn {
             this.E = 0;
         }} // Paper - end if (valid)
 
-        this.minecraftServer.getMethodProfiler().enter("keepAlive");
         // Paper Start - give clients a longer time to respond to pings as per pre 1.12.2 timings
         // This should effectively place the keepalive handling back to "as it was" before 1.12.2
         long currentTime = SystemUtils.getMonotonicMillis();
@@ -397,7 +396,6 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
         // Paper end
 
-        this.minecraftServer.getMethodProfiler().exit();
         // CraftBukkit start
         for (int spam; (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); ) ;
         if (tabSpamLimiter.get() > 0) tabSpamLimiter.getAndDecrement(); // Paper - split to seperate variable
diff --git a/src/main/java/net/minecraft/server/packs/resources/IReloadListener.java b/src/main/java/net/minecraft/server/packs/resources/IReloadListener.java
index c1b2fc365e42c446795e4850dcbd82714ef6e5c7..e9c94586e051aee413c8652491170883c8eaeddd 100644
--- a/src/main/java/net/minecraft/server/packs/resources/IReloadListener.java
+++ b/src/main/java/net/minecraft/server/packs/resources/IReloadListener.java
@@ -2,11 +2,10 @@ package net.minecraft.server.packs.resources;
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
-import net.minecraft.util.profiling.GameProfilerFiller;
 
 public interface IReloadListener {
 
-    CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller, GameProfilerFiller gameprofilerfiller1, Executor executor, Executor executor1);
+    CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, Executor executor, Executor executor1);
 
     default String c() {
         return this.getClass().getSimpleName();
diff --git a/src/main/java/net/minecraft/server/packs/resources/Reloadable.java b/src/main/java/net/minecraft/server/packs/resources/Reloadable.java
index 162ff358f6f0c08a7b6e1eb1b0e48c2c614070ac..ebb16861b85af768102f2dfc3b6c5369f2ee11d4 100644
--- a/src/main/java/net/minecraft/server/packs/resources/Reloadable.java
+++ b/src/main/java/net/minecraft/server/packs/resources/Reloadable.java
@@ -10,7 +10,6 @@ import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
 import net.minecraft.SystemUtils;
 import net.minecraft.util.Unit;
-import net.minecraft.util.profiling.GameProfilerDisabled;
 
 public class Reloadable<S> implements IReloadable {
 
@@ -26,7 +25,7 @@ public class Reloadable<S> implements IReloadable {
 
     public static Reloadable<Void> a(IResourceManager iresourcemanager, List<IReloadListener> list, Executor executor, Executor executor1, CompletableFuture<Unit> completablefuture) {
         return new Reloadable<>(executor, executor1, iresourcemanager, list, (ireloadlistener_a, iresourcemanager1, ireloadlistener, executor2, executor3) -> {
-            return ireloadlistener.a(ireloadlistener_a, iresourcemanager1, GameProfilerDisabled.a, GameProfilerDisabled.a, executor, executor3);
+            return ireloadlistener.a(ireloadlistener_a, iresourcemanager1, executor, executor3);
         }, completablefuture);
     }
 
diff --git a/src/main/java/net/minecraft/server/packs/resources/ReloadableProfiled.java b/src/main/java/net/minecraft/server/packs/resources/ReloadableProfiled.java
index c34c5b603a323417b93100067b7242aed3f1ce68..0dec78fc6802a96468d6c85e854108fa7da19678 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ReloadableProfiled.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ReloadableProfiled.java
@@ -9,8 +9,6 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import net.minecraft.SystemUtils;
 import net.minecraft.util.Unit;
-import net.minecraft.util.profiling.MethodProfiler;
-import net.minecraft.util.profiling.MethodProfilerResults;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -23,13 +21,7 @@ public class ReloadableProfiled extends Reloadable<ReloadableProfiled.a> {
         super(executor, executor1, iresourcemanager, list, (ireloadlistener_a, iresourcemanager1, ireloadlistener, executor2, executor3) -> {
             AtomicLong atomiclong = new AtomicLong();
             AtomicLong atomiclong1 = new AtomicLong();
-            MethodProfiler methodprofiler = new MethodProfiler(SystemUtils.a, () -> {
-                return 0;
-            }, false);
-            MethodProfiler methodprofiler1 = new MethodProfiler(SystemUtils.a, () -> {
-                return 0;
-            }, false);
-            CompletableFuture<Void> completablefuture1 = ireloadlistener.a(ireloadlistener_a, iresourcemanager1, methodprofiler, methodprofiler1, (runnable) -> {
+            CompletableFuture<Void> completablefuture1 = ireloadlistener.a(ireloadlistener_a, iresourcemanager1, (runnable) -> {
                 executor2.execute(() -> {
                     long i = SystemUtils.getMonotonicNanos();
 
@@ -46,7 +38,7 @@ public class ReloadableProfiled extends Reloadable<ReloadableProfiled.a> {
             });
 
             return completablefuture1.thenApplyAsync((ovoid) -> {
-                return new ReloadableProfiled.a(ireloadlistener.c(), methodprofiler.d(), methodprofiler1.d(), atomiclong, atomiclong1);
+                return new ReloadableProfiled.a(ireloadlistener.c(), atomiclong, atomiclong1);
             }, executor1);
         }, completablefuture);
         this.e.start();
@@ -63,8 +55,6 @@ public class ReloadableProfiled extends Reloadable<ReloadableProfiled.a> {
 
         for (Iterator iterator = list.iterator(); iterator.hasNext(); i += j) {
             ReloadableProfiled.a reloadableprofiled_a = (ReloadableProfiled.a) iterator.next();
-            MethodProfilerResults methodprofilerresults = reloadableprofiled_a.b;
-            MethodProfilerResults methodprofilerresults1 = reloadableprofiled_a.c;
             int k = (int) ((double) reloadableprofiled_a.d.get() / 1000000.0D);
 
             j = (int) ((double) reloadableprofiled_a.e.get() / 1000000.0D);
@@ -80,15 +70,11 @@ public class ReloadableProfiled extends Reloadable<ReloadableProfiled.a> {
     public static class a {
 
         private final String a;
-        private final MethodProfilerResults b;
-        private final MethodProfilerResults c;
         private final AtomicLong d;
         private final AtomicLong e;
 
-        private a(String s, MethodProfilerResults methodprofilerresults, MethodProfilerResults methodprofilerresults1, AtomicLong atomiclong, AtomicLong atomiclong1) {
+        private a(String s, AtomicLong atomiclong, AtomicLong atomiclong1) {
             this.a = s;
-            this.b = methodprofilerresults;
-            this.c = methodprofilerresults1;
             this.d = atomiclong;
             this.e = atomiclong1;
         }
diff --git a/src/main/java/net/minecraft/server/packs/resources/ResourceDataAbstract.java b/src/main/java/net/minecraft/server/packs/resources/ResourceDataAbstract.java
index 1422061ca21a956e9661d8571935f4f73b613bfb..bba0ef83773bcfc8806f299bcae991eda23867c6 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ResourceDataAbstract.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ResourceDataAbstract.java
@@ -2,24 +2,23 @@ package net.minecraft.server.packs.resources;
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
-import net.minecraft.util.profiling.GameProfilerFiller;
 
 public abstract class ResourceDataAbstract<T> implements IReloadListener {
 
     public ResourceDataAbstract() {}
 
     @Override
-    public final CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller, GameProfilerFiller gameprofilerfiller1, Executor executor, Executor executor1) {
+    public final CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, Executor executor, Executor executor1) {
         CompletableFuture<T> completablefuture = CompletableFuture.supplyAsync(() -> {
-            return this.b(iresourcemanager, gameprofilerfiller);
+            return this.b(iresourcemanager);
         }, executor);
 
         return completablefuture.thenCompose(ireloadlistener_a::a).thenAcceptAsync((object) -> {
-            this.a(object, iresourcemanager, gameprofilerfiller1);
+            this.a(object, iresourcemanager);
         }, executor1);
     }
 
-    protected abstract T b(IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller);
+    protected abstract T b(IResourceManager iresourcemanager);
 
-    protected abstract void a(T t0, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller);
+    protected abstract void a(T t0, IResourceManager iresourcemanager);
 }
diff --git a/src/main/java/net/minecraft/server/packs/resources/ResourceDataJson.java b/src/main/java/net/minecraft/server/packs/resources/ResourceDataJson.java
index 6166b0e93b2073fc772ca6cf066b920477cb8040..2e9e36c6c1dc26ab1dce95dff146698e2dec0c59 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ResourceDataJson.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ResourceDataJson.java
@@ -14,7 +14,6 @@ import java.util.Iterator;
 import java.util.Map;
 import net.minecraft.resources.MinecraftKey;
 import net.minecraft.util.ChatDeserializer;
-import net.minecraft.util.profiling.GameProfilerFiller;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -31,7 +30,7 @@ public abstract class ResourceDataJson extends ResourceDataAbstract<Map<Minecraf
     }
 
     @Override
-    protected Map<MinecraftKey, JsonElement> b(IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller) {
+    protected Map<MinecraftKey, JsonElement> b(IResourceManager iresourcemanager) {
         Map<MinecraftKey, JsonElement> map = Maps.newHashMap();
         int i = this.d.length() + 1;
         Iterator iterator = iresourcemanager.a(this.d, (s) -> {
diff --git a/src/main/java/net/minecraft/tags/TagRegistry.java b/src/main/java/net/minecraft/tags/TagRegistry.java
index 8a15c6e974028ce803414e22fb4a27eb55b2a734..464a0f91a5bffdd4b7a3071d3e13d6308f8fc190 100644
--- a/src/main/java/net/minecraft/tags/TagRegistry.java
+++ b/src/main/java/net/minecraft/tags/TagRegistry.java
@@ -9,7 +9,6 @@ import net.minecraft.core.IRegistry;
 import net.minecraft.resources.MinecraftKey;
 import net.minecraft.server.packs.resources.IReloadListener;
 import net.minecraft.server.packs.resources.IResourceManager;
-import net.minecraft.util.profiling.GameProfilerFiller;
 import net.minecraft.world.entity.EntityTypes;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
@@ -36,7 +35,7 @@ public class TagRegistry implements IReloadListener {
     }
 
     @Override
-    public CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller, GameProfilerFiller gameprofilerfiller1, Executor executor, Executor executor1) {
+    public CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, Executor executor, Executor executor1) {
         CompletableFuture<Map<MinecraftKey, Tag.a>> completablefuture = this.blockTags.a(iresourcemanager, executor);
         CompletableFuture<Map<MinecraftKey, Tag.a>> completablefuture1 = this.itemTags.a(iresourcemanager, executor);
         CompletableFuture<Map<MinecraftKey, Tag.a>> completablefuture2 = this.fluidTags.a(iresourcemanager, executor);
diff --git a/src/main/java/net/minecraft/util/profiling/GameProfilerDisabled.java b/src/main/java/net/minecraft/util/profiling/GameProfilerDisabled.java
index 98d82f1f39170c0f549b306428f81ec3d564e540..8821a864ce3abe411cbd203fd45990b8d9892deb 100644
--- a/src/main/java/net/minecraft/util/profiling/GameProfilerDisabled.java
+++ b/src/main/java/net/minecraft/util/profiling/GameProfilerDisabled.java
@@ -1,39 +1,5 @@
 package net.minecraft.util.profiling;
 
-import java.util.function.Supplier;
-
-public class GameProfilerDisabled implements GameProfilerFillerActive {
-
-    public static final GameProfilerDisabled a = new GameProfilerDisabled();
-
-    private GameProfilerDisabled() {}
-
-    @Override
-    public void a() {}
-
-    @Override
-    public void b() {}
-
-    @Override
-    public void enter(String s) {}
-
-    @Override
-    public void a(Supplier<String> supplier) {}
-
-    @Override
-    public void exit() {}
-
-    @Override
-    public void exitEnter(String s) {}
-
-    @Override
-    public void c(String s) {}
-
-    @Override
-    public void c(Supplier<String> supplier) {}
-
-    @Override
-    public MethodProfilerResults d() {
-        return MethodProfilerResultsEmpty.a;
-    }
+@Deprecated(forRemoval = true)
+public class GameProfilerDisabled {
 }
diff --git a/src/main/java/net/minecraft/util/profiling/GameProfilerFiller.java b/src/main/java/net/minecraft/util/profiling/GameProfilerFiller.java
index 3abf95900a63b815bcacbdae8eabd5135dfc8bdd..5d9b7d2f15250d194439ad242d415302ae062ae2 100644
--- a/src/main/java/net/minecraft/util/profiling/GameProfilerFiller.java
+++ b/src/main/java/net/minecraft/util/profiling/GameProfilerFiller.java
@@ -1,74 +1,5 @@
 package net.minecraft.util.profiling;
 
-import java.util.function.Supplier;
-
+@Deprecated(forRemoval = true)
 public interface GameProfilerFiller {
-
-    void a();
-
-    void b();
-
-    void enter(String s);
-
-    void a(Supplier<String> supplier);
-
-    void exit();
-
-    void exitEnter(String s);
-
-    void c(String s);
-
-    void c(Supplier<String> supplier);
-
-    static GameProfilerFiller a(final GameProfilerFiller gameprofilerfiller, final GameProfilerFiller gameprofilerfiller1) {
-        return gameprofilerfiller == GameProfilerDisabled.a ? gameprofilerfiller1 : (gameprofilerfiller1 == GameProfilerDisabled.a ? gameprofilerfiller : new GameProfilerFiller() {
-            @Override
-            public void a() {
-                gameprofilerfiller.a();
-                gameprofilerfiller1.a();
-            }
-
-            @Override
-            public void b() {
-                gameprofilerfiller.b();
-                gameprofilerfiller1.b();
-            }
-
-            @Override
-            public void enter(String s) {
-                gameprofilerfiller.enter(s);
-                gameprofilerfiller1.enter(s);
-            }
-
-            @Override
-            public void a(Supplier<String> supplier) {
-                gameprofilerfiller.a(supplier);
-                gameprofilerfiller1.a(supplier);
-            }
-
-            @Override
-            public void exit() {
-                gameprofilerfiller.exit();
-                gameprofilerfiller1.exit();
-            }
-
-            @Override
-            public void exitEnter(String s) {
-                gameprofilerfiller.exitEnter(s);
-                gameprofilerfiller1.exitEnter(s);
-            }
-
-            @Override
-            public void c(String s) {
-                gameprofilerfiller.c(s);
-                gameprofilerfiller1.c(s);
-            }
-
-            @Override
-            public void c(Supplier<String> supplier) {
-                gameprofilerfiller.c(supplier);
-                gameprofilerfiller1.c(supplier);
-            }
-        });
-    }
 }
diff --git a/src/main/java/net/minecraft/util/profiling/GameProfilerFillerActive.java b/src/main/java/net/minecraft/util/profiling/GameProfilerFillerActive.java
index e0bb3fd18c36053da841d8476f668aee8f8b76d6..765d87ecb401a63acf2e58faf79bec82a7915dbb 100644
--- a/src/main/java/net/minecraft/util/profiling/GameProfilerFillerActive.java
+++ b/src/main/java/net/minecraft/util/profiling/GameProfilerFillerActive.java
@@ -1,6 +1,5 @@
 package net.minecraft.util.profiling;
 
-public interface GameProfilerFillerActive extends GameProfilerFiller {
-
-    MethodProfilerResults d();
+@Deprecated(forRemoval = true)
+public interface GameProfilerFillerActive {
 }
diff --git a/src/main/java/net/minecraft/util/profiling/GameProfilerSwitcher.java b/src/main/java/net/minecraft/util/profiling/GameProfilerSwitcher.java
index 56b83bb363981b10cee88b23f7d0ffff20b4b5ba..e7157cc90b83b26f377d4e71944660aedd9d70f0 100644
--- a/src/main/java/net/minecraft/util/profiling/GameProfilerSwitcher.java
+++ b/src/main/java/net/minecraft/util/profiling/GameProfilerSwitcher.java
@@ -1,37 +1,5 @@
 package net.minecraft.util.profiling;
 
-import java.util.function.IntSupplier;
-import java.util.function.LongSupplier;
-
+@Deprecated(forRemoval = true)
 public class GameProfilerSwitcher {
-
-    private final LongSupplier a;
-    private final IntSupplier b;
-    private GameProfilerFillerActive c;
-
-    public GameProfilerSwitcher(LongSupplier longsupplier, IntSupplier intsupplier) {
-        this.c = GameProfilerDisabled.a;
-        this.a = longsupplier;
-        this.b = intsupplier;
-    }
-
-    public boolean a() {
-        return this.c != GameProfilerDisabled.a;
-    }
-
-    public void b() {
-        this.c = GameProfilerDisabled.a;
-    }
-
-    public void c() {
-        this.c = new MethodProfiler(this.a, this.b, true);
-    }
-
-    public GameProfilerFiller d() {
-        return this.c;
-    }
-
-    public MethodProfilerResults e() {
-        return this.c.d();
-    }
 }
diff --git a/src/main/java/net/minecraft/util/profiling/GameProfilerTick.java b/src/main/java/net/minecraft/util/profiling/GameProfilerTick.java
index 4e5f52b953c7735658fc050b0b365f120a4211eb..18e49d717388fc010b95b405ecc399e436a4bfcd 100644
--- a/src/main/java/net/minecraft/util/profiling/GameProfilerTick.java
+++ b/src/main/java/net/minecraft/util/profiling/GameProfilerTick.java
@@ -1,53 +1,5 @@
 package net.minecraft.util.profiling;
 
-import java.io.File;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.function.LongSupplier;
-import javax.annotation.Nullable;
-
-import net.minecraft.SystemUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
+@Deprecated(forRemoval = true)
 public class GameProfilerTick {
-
-    private static final Logger LOGGER = LogManager.getLogger();
-    private final LongSupplier b = SystemUtils.a; // wtf
-    private final long c = Long.MAX_VALUE; // wtf
-    private int d;
-    private final File e = new File("."); // wtf
-    private GameProfilerFillerActive f;
-
-    public GameProfilerFiller a() {
-        this.f = new MethodProfiler(this.b, () -> {
-            return this.d;
-        }, false);
-        ++this.d;
-        return this.f;
-    }
-
-    public void b() {
-        if (this.f != GameProfilerDisabled.a) {
-            MethodProfilerResults methodprofilerresults = this.f.d();
-
-            this.f = GameProfilerDisabled.a;
-            if (methodprofilerresults.g() >= this.c) {
-                File file = new File(this.e, "tick-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
-
-                methodprofilerresults.a(file);
-                GameProfilerTick.LOGGER.info("Recorded long tick -- wrote info to: {}", file.getAbsolutePath());
-            }
-
-        }
-    }
-
-    @Nullable
-    public static GameProfilerTick a(String s) {
-        return null;
-    }
-
-    public static GameProfilerFiller a(GameProfilerFiller gameprofilerfiller, @Nullable GameProfilerTick gameprofilertick) {
-        return gameprofilertick != null ? GameProfilerFiller.a(gameprofilertick.a(), gameprofilerfiller) : gameprofilerfiller;
-    }
 }
diff --git a/src/main/java/net/minecraft/util/profiling/MethodProfiler.java b/src/main/java/net/minecraft/util/profiling/MethodProfiler.java
index 1749b4853a85c1107dd7915101d23716b9685013..fbba9fd4e03130ca9ad4891aa7f2bd2aaee316ab 100644
--- a/src/main/java/net/minecraft/util/profiling/MethodProfiler.java
+++ b/src/main/java/net/minecraft/util/profiling/MethodProfiler.java
@@ -1,180 +1,5 @@
 package net.minecraft.util.profiling;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import it.unimi.dsi.fastutil.longs.LongArrayList;
-import it.unimi.dsi.fastutil.longs.LongList;
-import it.unimi.dsi.fastutil.objects.Object2LongMap;
-import it.unimi.dsi.fastutil.objects.Object2LongMaps;
-import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
-import java.time.Duration;
-import java.util.List;
-import java.util.Map;
-import java.util.function.IntSupplier;
-import java.util.function.LongSupplier;
-import javax.annotation.Nullable;
-import net.minecraft.SystemUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.util.Supplier;
-
-public class MethodProfiler implements GameProfilerFillerActive {
-
-    private static final long a = Duration.ofMillis(100L).toNanos();
-    private static final Logger LOGGER = LogManager.getLogger();
-    private final List<String> c = Lists.newArrayList();
-    private final LongList d = new LongArrayList();
-    private final Map<String, MethodProfiler.a> e = Maps.newHashMap();
-    private final IntSupplier f;
-    private final LongSupplier g;
-    private final long h;
-    private final int i;
-    private String j = "";
-    private boolean k;
-    @Nullable
-    private MethodProfiler.a l;
-    private final boolean m;
-
-    public MethodProfiler(LongSupplier longsupplier, IntSupplier intsupplier, boolean flag) {
-        this.h = longsupplier.getAsLong();
-        this.g = longsupplier;
-        this.i = intsupplier.getAsInt();
-        this.f = intsupplier;
-        this.m = flag;
-    }
-
-    @Override
-    public void a() {
-        if (this.k) {
-            MethodProfiler.LOGGER.error("Profiler tick already started - missing endTick()?");
-        } else {
-            this.k = true;
-            this.j = "";
-            this.c.clear();
-            this.enter("root");
-        }
-    }
-
-    @Override
-    public void b() {
-        if (!this.k) {
-            MethodProfiler.LOGGER.error("Profiler tick already ended - missing startTick()?");
-        } else {
-            this.exit();
-            this.k = false;
-            if (!this.j.isEmpty()) {
-                MethodProfiler.LOGGER.error("Profiler tick ended before path was fully popped (remainder: '{}'). Mismatched push/pop?", new Supplier[]{() -> {
-                            return MethodProfilerResults.b(this.j);
-                        }});
-            }
-
-        }
-    }
-
-    @Override
-    public void enter(String s) {
-        if (!this.k) {
-            MethodProfiler.LOGGER.error("Cannot push '{}' to profiler if profiler tick hasn't started - missing startTick()?", s);
-        } else {
-            if (!this.j.isEmpty()) {
-                this.j = this.j + '\u001e';
-            }
-
-            this.j = this.j + s;
-            this.c.add(this.j);
-            this.d.add(SystemUtils.getMonotonicNanos());
-            this.l = null;
-        }
-    }
-
-    @Override
-    public void a(java.util.function.Supplier<String> java_util_function_supplier) {
-        this.enter((String) java_util_function_supplier.get());
-    }
-
-    @Override
-    public void exit() {
-        if (!this.k) {
-            MethodProfiler.LOGGER.error("Cannot pop from profiler if profiler tick hasn't started - missing startTick()?");
-        } else if (this.d.isEmpty()) {
-            MethodProfiler.LOGGER.error("Tried to pop one too many times! Mismatched push() and pop()?");
-        } else {
-            long i = SystemUtils.getMonotonicNanos();
-            long j = this.d.removeLong(this.d.size() - 1);
-
-            this.c.remove(this.c.size() - 1);
-            long k = i - j;
-            MethodProfiler.a methodprofiler_a = this.e();
-
-            methodprofiler_a.a = methodprofiler_a.a + k;
-            methodprofiler_a.b = methodprofiler_a.b + 1L;
-            if (this.m && k > MethodProfiler.a) {
-                MethodProfiler.LOGGER.warn("Something's taking too long! '{}' took aprox {} ms", new Supplier[]{() -> {
-                            return MethodProfilerResults.b(this.j);
-                        }, () -> {
-                            return (double) k / 1000000.0D;
-                        }});
-            }
-
-            this.j = this.c.isEmpty() ? "" : (String) this.c.get(this.c.size() - 1);
-            this.l = null;
-        }
-    }
-
-    @Override
-    public void exitEnter(String s) {
-        this.exit();
-        this.enter(s);
-    }
-
-    private MethodProfiler.a e() {
-        if (this.l == null) {
-            this.l = (MethodProfiler.a) this.e.computeIfAbsent(this.j, (s) -> {
-                return new MethodProfiler.a();
-            });
-        }
-
-        return this.l;
-    }
-
-    @Override
-    public void c(String s) {
-        this.e().c.addTo(s, 1L);
-    }
-
-    @Override
-    public void c(java.util.function.Supplier<String> java_util_function_supplier) {
-        this.e().c.addTo(java_util_function_supplier.get(), 1L);
-    }
-
-    @Override
-    public MethodProfilerResults d() {
-        return new MethodProfilerResultsFilled(this.e, this.h, this.i, this.g.getAsLong(), this.f.getAsInt());
-    }
-
-    static class a implements MethodProfilerResult {
-
-        private long a;
-        private long b;
-        private Object2LongOpenHashMap<String> c;
-
-        private a() {
-            this.c = new Object2LongOpenHashMap();
-        }
-
-        @Override
-        public long a() {
-            return this.a;
-        }
-
-        @Override
-        public long b() {
-            return this.b;
-        }
-
-        @Override
-        public Object2LongMap<String> c() {
-            return Object2LongMaps.unmodifiable(this.c);
-        }
-    }
+@Deprecated(forRemoval = true)
+public class MethodProfiler {
 }
diff --git a/src/main/java/net/minecraft/util/profiling/MethodProfilerResult.java b/src/main/java/net/minecraft/util/profiling/MethodProfilerResult.java
index 784f97902616ce2ddd49a606aa32000247a54ce5..817dc6267db91861b563ca95e89c7362505d53de 100644
--- a/src/main/java/net/minecraft/util/profiling/MethodProfilerResult.java
+++ b/src/main/java/net/minecraft/util/profiling/MethodProfilerResult.java
@@ -1,12 +1,5 @@
 package net.minecraft.util.profiling;
 
-import it.unimi.dsi.fastutil.objects.Object2LongMap;
-
+@Deprecated(forRemoval = true)
 public interface MethodProfilerResult {
-
-    long a();
-
-    long b();
-
-    Object2LongMap<String> c();
 }
diff --git a/src/main/java/net/minecraft/util/profiling/MethodProfilerResults.java b/src/main/java/net/minecraft/util/profiling/MethodProfilerResults.java
index 7f9e95c189a453ce1ca3d5c683494552bc8a759d..69b02a96ced413e48305930d6d4b9655ad60c4ee 100644
--- a/src/main/java/net/minecraft/util/profiling/MethodProfilerResults.java
+++ b/src/main/java/net/minecraft/util/profiling/MethodProfilerResults.java
@@ -1,28 +1,5 @@
 package net.minecraft.util.profiling;
 
-import java.io.File;
-
+@Deprecated(forRemoval = true)
 public interface MethodProfilerResults {
-
-    boolean a(File file);
-
-    long a();
-
-    int b();
-
-    long c();
-
-    int d();
-
-    default long g() {
-        return this.c() - this.a();
-    }
-
-    default int f() {
-        return this.d() - this.b();
-    }
-
-    static String b(String s) {
-        return s.replace('\u001e', '.');
-    }
 }
diff --git a/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsEmpty.java b/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsEmpty.java
index 890036685cbb7b6a08f5ab82bebc6ebf31528eae..c799b831805bf350f5a12a0fd6496398a5e5468a 100644
--- a/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsEmpty.java
+++ b/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsEmpty.java
@@ -1,35 +1,5 @@
 package net.minecraft.util.profiling;
 
-import java.io.File;
-
-public class MethodProfilerResultsEmpty implements MethodProfilerResults {
-
-    public static final MethodProfilerResultsEmpty a = new MethodProfilerResultsEmpty();
-
-    private MethodProfilerResultsEmpty() {}
-
-    @Override
-    public boolean a(File file) {
-        return false;
-    }
-
-    @Override
-    public long a() {
-        return 0L;
-    }
-
-    @Override
-    public int b() {
-        return 0;
-    }
-
-    @Override
-    public long c() {
-        return 0L;
-    }
-
-    @Override
-    public int d() {
-        return 0;
-    }
+@Deprecated(forRemoval = true)
+public class MethodProfilerResultsEmpty {
 }
diff --git a/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsField.java b/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsField.java
index 2727819b38e9126b6851f35d0dbb4ec2919157a3..4f2b7d5a6141919fed2b5d8bbe12c4b79a46b5e5 100644
--- a/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsField.java
+++ b/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsField.java
@@ -1,20 +1,5 @@
 package net.minecraft.util.profiling;
 
-public final class MethodProfilerResultsField implements Comparable<MethodProfilerResultsField> {
-
-    public final double a;
-    public final double b;
-    public final long c;
-    public final String d;
-
-    public MethodProfilerResultsField(String s, double d0, double d1, long i) {
-        this.d = s;
-        this.a = d0;
-        this.b = d1;
-        this.c = i;
-    }
-
-    public int compareTo(MethodProfilerResultsField methodprofilerresultsfield) {
-        return methodprofilerresultsfield.a < this.a ? -1 : (methodprofilerresultsfield.a > this.a ? 1 : methodprofilerresultsfield.d.compareTo(this.d));
-    }
+@Deprecated(forRemoval = true)
+public final class MethodProfilerResultsField {
 }
diff --git a/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsFilled.java b/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsFilled.java
index 1402cc615dc54227503f8a053deb95cc3a6a24ba..c44c15312d93e75fe4609f9b6fc110ac33ed0898 100644
--- a/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsFilled.java
+++ b/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsFilled.java
@@ -1,307 +1,5 @@
 package net.minecraft.util.profiling;
 
-import com.google.common.base.Splitter;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import it.unimi.dsi.fastutil.objects.Object2LongMap;
-import it.unimi.dsi.fastutil.objects.Object2LongMaps;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.OutputStreamWriter;
-import java.nio.charset.StandardCharsets;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Map.Entry;
-import net.minecraft.SharedConstants;
-import net.minecraft.SystemUtils;
-import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang3.ObjectUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-public class MethodProfilerResultsFilled implements MethodProfilerResults {
-
-    private static final Logger LOGGER = LogManager.getLogger();
-    private static final MethodProfilerResult b = new MethodProfilerResult() {
-        @Override
-        public long a() {
-            return 0L;
-        }
-
-        @Override
-        public long b() {
-            return 0L;
-        }
-
-        @Override
-        public Object2LongMap<String> c() {
-            return Object2LongMaps.emptyMap();
-        }
-    };
-    private static final Splitter c = Splitter.on('\u001e');
-    private static final Comparator<Entry<String, MethodProfilerResultsFilled.a>> d = Entry.<String, MethodProfilerResultsFilled.a>comparingByValue(Comparator.comparingLong((methodprofilerresultsfilled_a) -> {
-        return methodprofilerresultsfilled_a.b;
-    })).reversed();
-    private final Map<String, ? extends MethodProfilerResult> e;
-    private final long f;
-    private final int g;
-    private final long h;
-    private final int i;
-    private final int j;
-
-    public MethodProfilerResultsFilled(Map<String, ? extends MethodProfilerResult> map, long i, int j, long k, int l) {
-        this.e = map;
-        this.f = i;
-        this.g = j;
-        this.h = k;
-        this.i = l;
-        this.j = l - j;
-    }
-
-    private MethodProfilerResult c(String s) {
-        MethodProfilerResult methodprofilerresult = (MethodProfilerResult) this.e.get(s);
-
-        return methodprofilerresult != null ? methodprofilerresult : MethodProfilerResultsFilled.b;
-    }
-
-    public List<MethodProfilerResultsField> a(String s) {
-        MethodProfilerResult methodprofilerresult = this.c("root");
-        long i = methodprofilerresult.a();
-        MethodProfilerResult methodprofilerresult1 = this.c(s);
-        long j = methodprofilerresult1.a();
-        long k = methodprofilerresult1.b();
-        List<MethodProfilerResultsField> list = Lists.newArrayList();
-
-        if (!s.isEmpty()) {
-            s = s + '\u001e';
-        }
-
-        long l = 0L;
-        Iterator iterator = this.e.keySet().iterator();
-
-        while (iterator.hasNext()) {
-            String s1 = (String) iterator.next();
-
-            if (a(s, s1)) {
-                l += this.c(s1).a();
-            }
-        }
-
-        float f = (float) l;
-
-        if (l < j) {
-            l = j;
-        }
-
-        if (i < l) {
-            i = l;
-        }
-
-        Iterator iterator1 = this.e.keySet().iterator();
-
-        while (iterator1.hasNext()) {
-            String s2 = (String) iterator1.next();
-
-            if (a(s, s2)) {
-                MethodProfilerResult methodprofilerresult2 = this.c(s2);
-                long i1 = methodprofilerresult2.a();
-                double d0 = (double) i1 * 100.0D / (double) l;
-                double d1 = (double) i1 * 100.0D / (double) i;
-                String s3 = s2.substring(s.length());
-
-                list.add(new MethodProfilerResultsField(s3, d0, d1, methodprofilerresult2.b()));
-            }
-        }
-
-        if ((float) l > f) {
-            list.add(new MethodProfilerResultsField("unspecified", (double) ((float) l - f) * 100.0D / (double) l, (double) ((float) l - f) * 100.0D / (double) i, k));
-        }
-
-        Collections.sort(list);
-        list.add(0, new MethodProfilerResultsField(s, 100.0D, (double) l * 100.0D / (double) i, k));
-        return list;
-    }
-
-    private static boolean a(String s, String s1) {
-        return s1.length() > s.length() && s1.startsWith(s) && s1.indexOf(30, s.length() + 1) < 0;
-    }
-
-    private Map<String, MethodProfilerResultsFilled.a> h() {
-        Map<String, MethodProfilerResultsFilled.a> map = Maps.newTreeMap();
-
-        this.e.forEach((s, methodprofilerresult) -> {
-            Object2LongMap<String> object2longmap = methodprofilerresult.c();
-
-            if (!object2longmap.isEmpty()) {
-                List<String> list = MethodProfilerResultsFilled.c.splitToList(s);
-
-                object2longmap.forEach((s1, olong) -> {
-                    ((MethodProfilerResultsFilled.a) map.computeIfAbsent(s1, (s2) -> {
-                        return new MethodProfilerResultsFilled.a();
-                    })).a(list.iterator(), olong);
-                });
-            }
-
-        });
-        return map;
-    }
-
-    @Override
-    public long a() {
-        return this.f;
-    }
-
-    @Override
-    public int b() {
-        return this.g;
-    }
-
-    @Override
-    public long c() {
-        return this.h;
-    }
-
-    @Override
-    public int d() {
-        return this.i;
-    }
-
-    @Override
-    public boolean a(File file) {
-        file.getParentFile().mkdirs();
-        OutputStreamWriter outputstreamwriter = null;
-
-        boolean flag;
-
-        try {
-            outputstreamwriter = new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8);
-            outputstreamwriter.write(this.a(this.g(), this.f()));
-            boolean flag1 = true;
-
-            return flag1;
-        } catch (Throwable throwable) {
-            MethodProfilerResultsFilled.LOGGER.error("Could not save profiler results to {}", file, throwable);
-            flag = false;
-        } finally {
-            IOUtils.closeQuietly(outputstreamwriter);
-        }
-
-        return flag;
-    }
-
-    protected String a(long i, int j) {
-        StringBuilder stringbuilder = new StringBuilder();
-
-        stringbuilder.append("---- Minecraft Profiler Results ----\n");
-        stringbuilder.append("// ");
-        stringbuilder.append(i());
-        stringbuilder.append("\n\n");
-        stringbuilder.append("Version: ").append(SharedConstants.getGameVersion().getId()).append('\n');
-        stringbuilder.append("Time span: ").append(i / 1000000L).append(" ms\n");
-        stringbuilder.append("Tick span: ").append(j).append(" ticks\n");
-        stringbuilder.append("// This is approximately ").append(String.format(Locale.ROOT, "%.2f", (float) j / ((float) i / 1.0E9F))).append(" ticks per second. It should be ").append(20).append(" ticks per second\n\n");
-        stringbuilder.append("--- BEGIN PROFILE DUMP ---\n\n");
-        this.a(0, "root", stringbuilder);
-        stringbuilder.append("--- END PROFILE DUMP ---\n\n");
-        Map<String, MethodProfilerResultsFilled.a> map = this.h();
-
-        if (!map.isEmpty()) {
-            stringbuilder.append("--- BEGIN COUNTER DUMP ---\n\n");
-            this.a(map, stringbuilder, j);
-            stringbuilder.append("--- END COUNTER DUMP ---\n\n");
-        }
-
-        return stringbuilder.toString();
-    }
-
-    private static StringBuilder a(StringBuilder stringbuilder, int i) {
-        stringbuilder.append(String.format("[%02d] ", i));
-
-        for (int j = 0; j < i; ++j) {
-            stringbuilder.append("|   ");
-        }
-
-        return stringbuilder;
-    }
-
-    private void a(int i, String s, StringBuilder stringbuilder) {
-        List<MethodProfilerResultsField> list = this.a(s);
-        Object2LongMap<String> object2longmap = ((MethodProfilerResult) ObjectUtils.firstNonNull(new MethodProfilerResult[]{(MethodProfilerResult) this.e.get(s), MethodProfilerResultsFilled.b})).c();
-
-        object2longmap.forEach((s1, olong) -> {
-            a(stringbuilder, i).append('#').append(s1).append(' ').append(olong).append('/').append(olong / (long) this.j).append('\n');
-        });
-        if (list.size() >= 3) {
-            for (int j = 1; j < list.size(); ++j) {
-                MethodProfilerResultsField methodprofilerresultsfield = (MethodProfilerResultsField) list.get(j);
-
-                a(stringbuilder, i).append(methodprofilerresultsfield.d).append('(').append(methodprofilerresultsfield.c).append('/').append(String.format(Locale.ROOT, "%.0f", (float) methodprofilerresultsfield.c / (float) this.j)).append(')').append(" - ").append(String.format(Locale.ROOT, "%.2f", methodprofilerresultsfield.a)).append("%/").append(String.format(Locale.ROOT, "%.2f", methodprofilerresultsfield.b)).append("%\n");
-                if (!"unspecified".equals(methodprofilerresultsfield.d)) {
-                    try {
-                        this.a(i + 1, s + '\u001e' + methodprofilerresultsfield.d, stringbuilder);
-                    } catch (Exception exception) {
-                        stringbuilder.append("[[ EXCEPTION ").append(exception).append(" ]]");
-                    }
-                }
-            }
-
-        }
-    }
-
-    private void a(int i, String s, MethodProfilerResultsFilled.a methodprofilerresultsfilled_a, int j, StringBuilder stringbuilder) {
-        a(stringbuilder, i).append(s).append(" total:").append(methodprofilerresultsfilled_a.a).append('/').append(methodprofilerresultsfilled_a.b).append(" average: ").append(methodprofilerresultsfilled_a.a / (long) j).append('/').append(methodprofilerresultsfilled_a.b / (long) j).append('\n');
-        methodprofilerresultsfilled_a.c.entrySet().stream().sorted(MethodProfilerResultsFilled.d).forEach((entry) -> {
-            this.a(i + 1, (String) entry.getKey(), (MethodProfilerResultsFilled.a) entry.getValue(), j, stringbuilder);
-        });
-    }
-
-    private void a(Map<String, MethodProfilerResultsFilled.a> map, StringBuilder stringbuilder, int i) {
-        map.forEach((s, methodprofilerresultsfilled_a) -> {
-            stringbuilder.append("-- Counter: ").append(s).append(" --\n");
-            this.a(0, "root", (MethodProfilerResultsFilled.a) methodprofilerresultsfilled_a.c.get("root"), i, stringbuilder);
-            stringbuilder.append("\n\n");
-        });
-    }
-
-    private static String i() {
-        String[] astring = new String[]{"Shiny numbers!", "Am I not running fast enough? :(", "I'm working as hard as I can!", "Will I ever be good enough for you? :(", "Speedy. Zoooooom!", "Hello world", "40% better than a crash report.", "Now with extra numbers", "Now with less numbers", "Now with the same numbers", "You should add flames to things, it makes them go faster!", "Do you feel the need for... optimization?", "*cracks redstone whip*", "Maybe if you treated it better then it'll have more motivation to work faster! Poor server."};
-
-        try {
-            return astring[(int) (SystemUtils.getMonotonicNanos() % (long) astring.length)];
-        } catch (Throwable throwable) {
-            return "Witty comment unavailable :(";
-        }
-    }
-
-    @Override
-    public int f() {
-        return this.j;
-    }
-
-    static class a {
-
-        private long a;
-        private long b;
-        private final Map<String, MethodProfilerResultsFilled.a> c;
-
-        private a() {
-            this.c = Maps.newHashMap();
-        }
-
-        public void a(Iterator<String> iterator, long i) {
-            this.b += i;
-            if (!iterator.hasNext()) {
-                this.a += i;
-            } else {
-                ((MethodProfilerResultsFilled.a) this.c.computeIfAbsent(iterator.next(), (s) -> {
-                    return new MethodProfilerResultsFilled.a();
-                })).a(iterator, i);
-            }
-
-        }
-    }
+@Deprecated(forRemoval = true)
+public class MethodProfilerResultsFilled {
 }
diff --git a/src/main/java/net/minecraft/util/profiling/package-info.java b/src/main/java/net/minecraft/util/profiling/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..2e0b5af6dd4407c2ee349a02daf32cc01e72320c
--- /dev/null
+++ b/src/main/java/net/minecraft/util/profiling/package-info.java
@@ -0,0 +1,2 @@
+@Deprecated(forRemoval = true)
+package net.minecraft.util.profiling;
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 2815a7fb9d8640ec7e0ff3b54e189a7657e4b6d9..896b20c6c02b1b6892bbf61a7bcbd163b5c55f36 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -602,7 +602,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     // CraftBukkit end
 
     public void entityBaseTick() {
-        this.world.getMethodProfiler().enter("entityBaseTick");
         if (this.isPassenger() && this.getVehicle().dead) {
             this.stopRiding();
         }
@@ -660,7 +659,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
         }
 
         this.justCreated = false;
-        this.world.getMethodProfiler().exit();
     }
 
     public void resetPortalCooldown() {
@@ -822,7 +820,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
                 }
             }
 
-            this.world.getMethodProfiler().enter("move");
             if (this.x.g() > 1.0E-7D) {
                 vec3d = vec3d.h(this.x);
                 this.x = Vec3D.ORIGIN;
@@ -831,7 +828,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
             // Paper start - ignore movement changes while inactive.
             if (isTemporarilyActive && !(this instanceof EntityItem || this instanceof EntityMinecartAbstract) && vec3d == getMot() && enummovetype == EnumMoveType.SELF) {
                 setMot(Vec3D.ORIGIN);
-                this.world.getMethodProfiler().exit();
                 return;
             }
             // Paper end
@@ -844,8 +840,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
                 this.recalcPosition();
             }
 
-            this.world.getMethodProfiler().exit();
-            this.world.getMethodProfiler().enter("rest");
             this.positionChanged = !MathHelper.b(vec3d.x, vec3d1.x) || !MathHelper.b(vec3d.z, vec3d1.z);
             this.v = vec3d.y != vec3d1.y;
             this.onGround = this.v && vec3d.y < 0.0D;
@@ -946,8 +940,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
                 this.playSound(SoundEffects.ENTITY_GENERIC_EXTINGUISH_FIRE, 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
                 this.setFireTicks(-this.getMaxFireTicks());
             }
-
-            this.world.getMethodProfiler().exit();
         }
         // Tuinity start - detailed watchdog information
         } finally {
@@ -2583,7 +2575,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
                 WorldServer worldserver1 = minecraftserver.getWorldServer(resourcekey);
 
                 if (true && !this.isPassenger() && this.portalTicks++ >= i) { // CraftBukkit
-                    this.world.getMethodProfiler().enter("portal");
                     this.portalTicks = i;
                     this.resetPortalCooldown();
                     // CraftBukkit start
@@ -2593,7 +2584,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
                         this.b(worldserver1);
                     }
                     // CraftBukkit end
-                    this.world.getMethodProfiler().exit();
                 }
 
                 this.inPortal = false;
@@ -2983,14 +2973,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
         }
         // Paper end
         if (this.world instanceof WorldServer && !this.dead) {
-            this.world.getMethodProfiler().enter("changeDimension");
             // CraftBukkit start
             // this.decouple();
             if (worldserver == null) {
                 return null;
             }
             // CraftBukkit end
-            this.world.getMethodProfiler().enter("reposition");
             ShapeDetectorShape shapedetectorshape = (location == null) ? this.a(worldserver) : new ShapeDetectorShape(new Vec3D(location.getX(), location.getY(), location.getZ()), Vec3D.ORIGIN, this.yaw, this.pitch, worldserver, null); // CraftBukkit
 
             if (shapedetectorshape == null) {
@@ -3001,7 +2989,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
                 this.decouple();
                 // CraftBukkit end
 
-                this.world.getMethodProfiler().exitEnter("reloading");
                 // Paper start - Change lead drop timing to prevent dupe
                 if (this instanceof EntityInsentient) {
                     ((EntityInsentient) this).unleash(true, true); // Paper drop lead
@@ -3024,10 +3011,8 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
                 }
 
                 this.bN();
-                this.world.getMethodProfiler().exit();
                 ((WorldServer) this.world).resetEmptyTime();
                 worldserver.resetEmptyTime();
-                this.world.getMethodProfiler().exit();
                 return entity;
             }
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/EntityInsentient.java b/src/main/java/net/minecraft/world/entity/EntityInsentient.java
index b4afd71340a0c7e1b6aa2e3f01a6a4fc998f3f16..82535079aa7f52e04be43b867bc8dfe2cea26d76 100644
--- a/src/main/java/net/minecraft/world/entity/EntityInsentient.java
+++ b/src/main/java/net/minecraft/world/entity/EntityInsentient.java
@@ -134,8 +134,8 @@ public abstract class EntityInsentient extends EntityLiving {
         this.bt = Maps.newEnumMap(PathType.class);
         this.bz = BlockPosition.ZERO;
         this.bA = -1.0F;
-        this.goalSelector = new PathfinderGoalSelector(world.getMethodProfilerSupplier());
-        this.targetSelector = new PathfinderGoalSelector(world.getMethodProfilerSupplier());
+        this.goalSelector = new PathfinderGoalSelector();
+        this.targetSelector = new PathfinderGoalSelector();
         this.lookController = new net.pl3x.purpur.controller.ControllerLookWASD(this); // Purpur
         this.moveController = new net.pl3x.purpur.controller.ControllerMoveWASD(this); // Purpur
         this.bi = new ControllerJump(this);
@@ -314,13 +314,11 @@ public abstract class EntityInsentient extends EntityLiving {
     @Override
     public void entityBaseTick() {
         super.entityBaseTick();
-        this.world.getMethodProfiler().enter("mobBaseTick");
         if (this.isAlive() && this.random.nextInt(1000) < this.e++) {
             this.m();
             this.F();
         }
         incrementTicksSinceLastInteraction(); // Purpur
-        this.world.getMethodProfiler().exit();
     }
 
     // Purpur start
@@ -648,7 +646,6 @@ public abstract class EntityInsentient extends EntityLiving {
     @Override
     public void movementTick() {
         super.movementTick();
-        this.world.getMethodProfiler().enter("looting");
         if (!this.world.isClientSide && this.canPickupLoot() && this.isAlive() && !this.killed && (this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) || world.purpurConfig.entitiesPickUpLootBypassMobGriefing)) { // Purpur
             List<EntityItem> list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
             Iterator iterator = list.iterator();
@@ -666,8 +663,6 @@ public abstract class EntityInsentient extends EntityLiving {
                 }
             }
         }
-
-        this.world.getMethodProfiler().exit();
     }
 
     protected void b(EntityItem entityitem) {
@@ -861,30 +856,14 @@ public abstract class EntityInsentient extends EntityLiving {
             return;
         }
         // Paper end
-        this.world.getMethodProfiler().enter("sensing");
         this.bo.a();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("targetSelector");
         this.targetSelector.doTick();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("goalSelector");
         this.goalSelector.doTick();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("navigation");
         this.navigation.c();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("mob tick");
         this.mobTick();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("controls");
-        this.world.getMethodProfiler().enter("move");
         this.moveController.a();
-        this.world.getMethodProfiler().exitEnter("look");
         this.lookController.a();
-        this.world.getMethodProfiler().exitEnter("jump");
         this.bi.b();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().exit();
         this.M();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/EntityLiving.java b/src/main/java/net/minecraft/world/entity/EntityLiving.java
index 1a05f46a4a79ad390809f3daff7eb360bad22586..abfdd5f33f42e61238a9208310801d7a1c5b6b47 100644
--- a/src/main/java/net/minecraft/world/entity/EntityLiving.java
+++ b/src/main/java/net/minecraft/world/entity/EntityLiving.java
@@ -366,7 +366,6 @@ public abstract class EntityLiving extends Entity {
         }
 
         super.entityBaseTick();
-        this.world.getMethodProfiler().enter("livingEntityBaseTick");
         boolean flag = this instanceof EntityHuman;
 
         if (this.isAlive()) {
@@ -469,7 +468,6 @@ public abstract class EntityLiving extends Entity {
         this.aD = this.aC;
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
-        this.world.getMethodProfiler().exit();
     }
 
     public boolean cN() {
@@ -2691,10 +2689,7 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.aK += (f3 - this.aK) * 0.3F;
-        this.world.getMethodProfiler().enter("headTurn");
         f2 = this.f(f1, f2);
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("rangeChecks");
 
         while (this.yaw - this.lastYaw < -180.0F) {
             this.lastYaw -= 360.0F;
@@ -2728,7 +2723,6 @@ public abstract class EntityLiving extends Entity {
             this.aD += 360.0F;
         }
 
-        this.world.getMethodProfiler().exit();
         this.aL += f2;
         if (this.isGliding()) {
             ++this.be;
@@ -2926,19 +2920,14 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.setMot(d4, d5, d6);
-        this.world.getMethodProfiler().enter("ai");
         if (this.isFrozen()) {
             this.jumping = false;
             this.aR = 0.0F;
             this.aT = 0.0F;
         } else if (this.doAITick()) {
-            this.world.getMethodProfiler().enter("newAi");
             this.doTick();
-            this.world.getMethodProfiler().exit();
         }
 
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("jump");
         if (this.jumping && this.cT()) {
             double d7;
 
@@ -2965,8 +2954,6 @@ public abstract class EntityLiving extends Entity {
             this.jumpTicks = 0;
         }
 
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("travel");
         this.aR *= 0.98F;
         this.aT *= 0.98F;
         this.r();
@@ -2975,15 +2962,12 @@ public abstract class EntityLiving extends Entity {
         // SpigotTimings.timerEntityAIMove.startTiming(); // Spigot // Paper
         this.g(new Vec3D((double) this.aR, (double) this.aS, (double) this.aT));
         // SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot // Paper
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("push");
         if (this.bf > 0) {
             --this.bf;
             this.a(axisalignedbb, this.getBoundingBox());
         }
 
         this.collideNearby();
-        this.world.getMethodProfiler().exit();
         // Paper start
         // Purpur start
         if (lastX != locX() || lastY != locY() || lastZ != locZ() || lastYaw != yaw || lastPitch != pitch) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalSelector.java b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalSelector.java
index 637928664f8c7b1c694a234e507c20724294e450..818618840ccd1656e4c15f3b4a02e06c7e7f4d33 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalSelector.java
@@ -9,7 +9,6 @@ import java.util.Map;
 import java.util.Set;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
-import net.minecraft.util.profiling.GameProfilerFiller;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -29,16 +28,11 @@ public class PathfinderGoalSelector {
     };
     private final Map<PathfinderGoal.Type, PathfinderGoalWrapped> c = new EnumMap(PathfinderGoal.Type.class);
     private final Set<PathfinderGoalWrapped> d = Sets.newLinkedHashSet(); public final Set<PathfinderGoalWrapped> getTasks() { return d; }// Paper - OBFHELPER // Paper - private -> public
-    private final Supplier<GameProfilerFiller> e;
     private final EnumSet<PathfinderGoal.Type> f = EnumSet.noneOf(PathfinderGoal.Type.class); // Paper unused, but dummy to prevent plugins from crashing as hard. Theyll need to support paper in a special case if this is super important, but really doesn't seem like it would be.
     private final OptimizedSmallEnumSet<PathfinderGoal.Type> goalTypes = new OptimizedSmallEnumSet<>(PathfinderGoal.Type.class); // Paper - remove streams from pathfindergoalselector
     private int g = 3;private int getTickRate() { return g; } // Paper - OBFHELPER
     private int curRate;private int getCurRate() { return curRate; } private void incRate() { this.curRate++; } // Paper TODO
 
-    public PathfinderGoalSelector(Supplier<GameProfilerFiller> supplier) {
-        this.e = supplier;
-    }
-
     public void addGoal(int priority, PathfinderGoal goal) {a(priority, goal);} public void a(int i, PathfinderGoal pathfindergoal) { // Paper - OBFHELPER
         this.d.add(new PathfinderGoalWrapped(i, pathfindergoal));
     }
@@ -76,9 +70,6 @@ public class PathfinderGoalSelector {
     private static final PathfinderGoal.Type[] PATHFINDER_GOAL_TYPES = PathfinderGoal.Type.values(); // Paper - remove streams from pathfindergoalselector
 
     public void doTick() {
-        GameProfilerFiller gameprofilerfiller = (GameProfilerFiller) this.e.get();
-
-        gameprofilerfiller.enter("goalCleanup");
         // Paper start - remove streams from pathfindergoalselector
         for (Iterator<PathfinderGoalWrapped> iterator = this.d.iterator(); iterator.hasNext();) {
             PathfinderGoalWrapped wrappedGoal = iterator.next();
@@ -97,8 +88,6 @@ public class PathfinderGoalSelector {
             }
 
         });
-        gameprofilerfiller.exit();
-        gameprofilerfiller.enter("goalUpdate");
         // Paper start - remove streams from pathfindergoalselector
         goal_update_loop: for (Iterator<PathfinderGoalWrapped> iterator = this.d.iterator(); iterator.hasNext();) {
             PathfinderGoalWrapped wrappedGoal = iterator.next();
@@ -141,8 +130,6 @@ public class PathfinderGoalSelector {
             wrappedGoal.c();
         }
         // Paper end - remove streams from pathfindergoalselector
-        gameprofilerfiller.exit();
-        gameprofilerfiller.enter("goalTick");
         // Paper start - remove streams from pathfindergoalselector
         for (Iterator<PathfinderGoalWrapped> iterator = this.d.iterator(); iterator.hasNext();) {
             PathfinderGoalWrapped wrappedGoal = iterator.next();
@@ -151,7 +138,6 @@ public class PathfinderGoalSelector {
             }
         }
         // Paper end - remove streams from pathfindergoalselector
-        gameprofilerfiller.exit();
     }
 
     public final Stream<PathfinderGoalWrapped> getExecutingGoals() { return d(); } // Paper - OBFHELPER
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationAbstract.java b/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationAbstract.java
index a1b7ba4f2cef36e9ac7e21c22060090944ba943b..1d75b8ae353632aa2995344d2e09d427e706195f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationAbstract.java
@@ -171,14 +171,12 @@ public abstract class NavigationAbstract {
                 }
             }
             // Paper end
-            this.b.getMethodProfiler().enter("pathfind");
             float f = (float) this.a.b(GenericAttributes.FOLLOW_RANGE);
             BlockPosition blockposition = flag ? this.a.getChunkCoordinates().up() : this.a.getChunkCoordinates();
             int k = (int) (f + (float) i);
             ChunkCache chunkcache = new ChunkCache(this.b, blockposition.b(-k, -k, -k), blockposition.b(k, k, k));
             PathEntity pathentity = this.s.a(chunkcache, this.a, set, f, j, this.r);
 
-            this.b.getMethodProfiler().exit();
             if (pathentity != null && pathentity.m() != null) {
                 this.p = pathentity.m();
                 this.q = j;
diff --git a/src/main/java/net/minecraft/world/entity/monster/EntityZoglin.java b/src/main/java/net/minecraft/world/entity/monster/EntityZoglin.java
index 4d03a2dc2aed9b292ac17dc57d560f13e655cf4a..a4f8da389bfec34c804d65e101255483613c62d1 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EntityZoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EntityZoglin.java
@@ -216,10 +216,8 @@ public class EntityZoglin extends EntityMonster implements IMonster, IOglin {
 
     @Override
     protected void mobTick() {
-        this.world.getMethodProfiler().enter("zoglinBrain");
         if (getPurpurRider() == null) // Purpur - only use brain if no rider
         this.getBehaviorController().a((WorldServer) this.world, this); // Purpur - decompile error
-        this.world.getMethodProfiler().exit();
         this.eL();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/EntityHoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/EntityHoglin.java
index e9b466bb3172fcae1dee81e7e1b8c069b0a23944..e81ebeac802eca89598f0f48ef471bce25f433bc 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/EntityHoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/EntityHoglin.java
@@ -145,10 +145,8 @@ public class EntityHoglin extends EntityAnimal implements IMonster, IOglin {
 
     @Override
     protected void mobTick() {
-        this.world.getMethodProfiler().enter("hoglinBrain");
         if (getPurpurRider() == null) // Purpur - only use brain if no rider
         this.getBehaviorController().a((WorldServer) this.world, this); // Purpour - decompile error
-        this.world.getMethodProfiler().exit();
         HoglinAI.a(this);
         if (this.isConverting()) {
             ++this.conversionTicks;
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/EntityPiglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/EntityPiglin.java
index 77af7152a2e5ff99e98a0063947427c0d18aabcb..6950e055debd732aa46f575b6846f539a84556b3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/EntityPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/EntityPiglin.java
@@ -291,10 +291,8 @@ public class EntityPiglin extends EntityPiglinAbstract implements ICrossbow {
 
     @Override
     protected void mobTick() {
-        this.world.getMethodProfiler().enter("piglinBrain");
         if (getPurpurRider() == null) // Purpur - only use brain if no rider
         this.getBehaviorController().a((WorldServer) this.world, (EntityPiglin) this); // CraftBukkit - decompile error
-        this.world.getMethodProfiler().exit();
         PiglinAI.b(this);
         super.mobTick();
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/EntityPiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/EntityPiglinBrute.java
index 201b78ffb5062254a6b3447f217df03dfb498710..83ab9fad3f53a921503d095d743726746e67452c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/EntityPiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/EntityPiglinBrute.java
@@ -100,10 +100,8 @@ public class EntityPiglinBrute extends EntityPiglinAbstract {
 
     @Override
     protected void mobTick() {
-        this.world.getMethodProfiler().enter("piglinBruteBrain");
         if (getPurpurRider() == null) // Purpur - only use brain if no rider
         this.getBehaviorController().a((WorldServer) this.world, this); // Purpur - decompile error
-        this.world.getMethodProfiler().exit();
         PiglinBruteAI.b(this);
         PiglinBruteAI.c(this);
         super.mobTick();
diff --git a/src/main/java/net/minecraft/world/entity/npc/EntityVillager.java b/src/main/java/net/minecraft/world/entity/npc/EntityVillager.java
index 66863b31687a41f84f722c611064f7ad31e02488..17c0caa94ec67a531dcf9a2d0c7345c3a8bbe36a 100644
--- a/src/main/java/net/minecraft/world/entity/npc/EntityVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/EntityVillager.java
@@ -289,7 +289,6 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     @Override
     protected void mobTick() { mobTick(false); }
     protected void mobTick(boolean inactive) {
-        this.world.getMethodProfiler().enter("villagerBrain");
         // Purpur start
         if (world.purpurConfig.villagerLobotomizeEnabled) inactive = inactive || isLobotomized();
         boolean tick = (world.getTime() + brainTickOffset) % world.purpurConfig.villagerBrainTicks == 0;
@@ -297,7 +296,6 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
         // Purpur end
         if (!inactive) this.getBehaviorController().a((WorldServer) this.world, this); // CraftBukkit - decompile error // Paper
         else if (shouldRestock()) doRestock(); // Purpur
-        this.world.getMethodProfiler().exit();
         if (this.bF) {
             this.bF = false;
         }
diff --git a/src/main/java/net/minecraft/world/item/crafting/CraftingManager.java b/src/main/java/net/minecraft/world/item/crafting/CraftingManager.java
index 5ba58bf1a47c696235e6e7a4a6815104bc23de80..7694e9a2734716506d139afbd225db6021e31791 100644
--- a/src/main/java/net/minecraft/world/item/crafting/CraftingManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/CraftingManager.java
@@ -27,7 +27,6 @@ import net.minecraft.resources.MinecraftKey;
 import net.minecraft.server.packs.resources.IResourceManager;
 import net.minecraft.server.packs.resources.ResourceDataJson;
 import net.minecraft.util.ChatDeserializer;
-import net.minecraft.util.profiling.GameProfilerFiller;
 import net.minecraft.world.IInventory;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.World;
@@ -47,7 +46,7 @@ public class CraftingManager extends ResourceDataJson {
         super(CraftingManager.a, "recipes");
     }
 
-    protected void a(Map<MinecraftKey, JsonElement> map, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller) {
+    protected void a(Map<MinecraftKey, JsonElement> map, IResourceManager iresourcemanager) {
         this.d = false;
         // CraftBukkit start - SPIGOT-5667 make sure all types are populated and mutable
         Map<Recipes<?>, Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>>> map1 = Maps.newHashMap();
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 79008bda42558ea7d28ccf51b66405a3bdb52da7..1e09c884d0481823050cd26fc2fc9fb179575d1a 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -322,7 +322,6 @@ public class Explosion {
                 if (!iblockdata.isAir() && iblockdata.isDestroyable()) { // Paper
                     BlockPosition blockposition1 = blockposition.immutableCopy();
 
-                    this.world.getMethodProfiler().enter("explosion_blocks");
                     if (block.a(this) && this.world instanceof WorldServer) {
                         TileEntity tileentity = block.isTileEntity() ? this.world.getTileEntity(blockposition) : null;
                         LootTableInfo.Builder loottableinfo_builder = (new LootTableInfo.Builder((WorldServer) this.world)).a(this.world.random).set(LootContextParameters.ORIGIN, Vec3D.a((BaseBlockPosition) blockposition)).set(LootContextParameters.TOOL, ItemStack.b).setOptional(LootContextParameters.BLOCK_ENTITY, tileentity).setOptional(LootContextParameters.THIS_ENTITY, this.source);
@@ -338,7 +337,6 @@ public class Explosion {
 
                     this.world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 3);
                     block.wasExploded(this.world, blockposition, this);
-                    this.world.getMethodProfiler().exit();
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/level/SpawnerCreature.java b/src/main/java/net/minecraft/world/level/SpawnerCreature.java
index 14d1d6ff4c529fe156fa0cf0ffbbda1f2e9415cd..9c9e347102d6d3dfa3a6520b4d0fbcf8e9c40ae3 100644
--- a/src/main/java/net/minecraft/world/level/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/world/level/SpawnerCreature.java
@@ -131,7 +131,6 @@ public final class SpawnerCreature {
     }
 
     public static void a(WorldServer worldserver, Chunk chunk, SpawnerCreature.d spawnercreature_d, boolean flag, boolean flag1, boolean flag2) {
-        worldserver.getMethodProfiler().enter("spawner");
         EnumCreatureType[] aenumcreaturetype = SpawnerCreature.c;
         int i = aenumcreaturetype.length;
 
@@ -203,8 +202,6 @@ public final class SpawnerCreature {
                 // Paper end - per player mob spawning
             }
         }
-
-        worldserver.getMethodProfiler().exit();
     }
 
     public static void a(EnumCreatureType enumcreaturetype, WorldServer worldserver, Chunk chunk, SpawnerCreature.c spawnercreature_c, SpawnerCreature.a spawnercreature_a) {
diff --git a/src/main/java/net/minecraft/world/level/TickListServer.java b/src/main/java/net/minecraft/world/level/TickListServer.java
index b39c827570814af92238aae2e29e70f23ca1bff6..4f1fb30f44d90aa0685330b7348c0a15461c3415 100644
--- a/src/main/java/net/minecraft/world/level/TickListServer.java
+++ b/src/main/java/net/minecraft/world/level/TickListServer.java
@@ -74,8 +74,6 @@ public class TickListServer<T> implements TickList<T> {
             ChunkProviderServer chunkproviderserver = this.e.getChunkProvider();
             Iterator<NextTickListEntry<T>> iterator = this.nextTickList.iterator();
 
-            this.e.getMethodProfiler().enter("cleaning");
-
             NextTickListEntry nextticklistentry;
 
             while (i > 0 && iterator.hasNext()) {
@@ -91,7 +89,6 @@ public class TickListServer<T> implements TickList<T> {
                     --i;
                 }
             }
-            this.e.getMethodProfiler().exitEnter("ticking");
 
             while ((nextticklistentry = (NextTickListEntry) this.f.poll()) != null) {
                 if (chunkproviderserver.a(nextticklistentry.a)) {
@@ -110,7 +107,6 @@ public class TickListServer<T> implements TickList<T> {
                 }
             }
 
-            this.e.getMethodProfiler().exit();
             this.g.clear();
             this.f.clear();
         }
diff --git a/src/main/java/net/minecraft/world/level/World.java b/src/main/java/net/minecraft/world/level/World.java
index 97d23f7219f074de722f233390e384da2a83151f..c9adadf52114a0f029a8e6ff0ea9a8f3583cb5c9 100644
--- a/src/main/java/net/minecraft/world/level/World.java
+++ b/src/main/java/net/minecraft/world/level/World.java
@@ -116,7 +116,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     public final Random random = new Random();
     private final DimensionManager x;
     public final WorldDataMutable worldData;
-    private final Supplier<GameProfilerFiller> methodProfiler;
     public final boolean isClientSide;
     protected boolean tickingTileEntities;
     private final WorldBorder worldBorder;
@@ -290,7 +289,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     }
     // Tuinity end - optimise checkDespawn
 
-    protected World(WorldDataMutable worlddatamutable, ResourceKey<World> resourcekey, final DimensionManager dimensionmanager, Supplier<GameProfilerFiller> supplier, boolean flag, boolean flag1, long i, org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env, java.util.concurrent.Executor executor) { // Paper
+    protected World(WorldDataMutable worlddatamutable, ResourceKey<World> resourcekey, final DimensionManager dimensionmanager, boolean flag, boolean flag1, long i, org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env, java.util.concurrent.Executor executor) { // Paper
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.WorldDataServer) worlddatamutable).getName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.WorldDataServer) worlddatamutable).getName(), this.spigotConfig); // Paper
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this, executor) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
@@ -308,7 +307,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
             return new IllegalStateException("Unregistered dimension type: " + dimensionmanager);
         });
         // CraftBukkit end
-        this.methodProfiler = supplier;
         this.worldData = worlddatamutable;
         this.x = dimensionmanager;
         this.dimensionKey = resourcekey;
@@ -588,9 +586,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
                 IBlockData iblockdata2 = this.getType(blockposition);
 
                 if ((i & 128) == 0 && iblockdata2 != iblockdata1 && (iblockdata2.b((IBlockAccess) this, blockposition) != iblockdata1.b((IBlockAccess) this, blockposition) || iblockdata2.f() != iblockdata1.f() || iblockdata2.e() || iblockdata1.e())) {
-                    this.getMethodProfiler().enter("queueCheckLight");
                     this.getChunkProvider().getLightEngine().a(blockposition);
-                    this.getMethodProfiler().exit();
                 }
 
                 /*
@@ -943,9 +939,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     }
 
     public void tickBlockEntities() {
-        GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
-
-        gameprofilerfiller.enter("blockEntities");
         if (!this.tileEntityListUnload.isEmpty()) {
             // Paper start - Use alternate implementation with faster contains
             java.util.Set<TileEntity> toRemove = java.util.Collections.newSetFromMap(new java.util.IdentityHashMap<>());
@@ -977,16 +970,12 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
                 Chunk chunk; PlayerChunk playerChunk; if ((chunk = tileentity.getCurrentChunk()) != null && (playerChunk = chunk.playerChunk) != null && playerChunk.isTickingReady() && this.getWorldBorder().isInBounds(blockposition)) { // Paper - optimized tick ready check by inlining ChunkProviderServer.a(BlockPosition). Chunk lookup is no longer required and we can use the PlayerChunk directly available through the tile entity
                     try {
-                        gameprofilerfiller.a(() -> {
-                            return String.valueOf(TileEntityTypes.a(tileentity.getTileType()));
-                        });
                         if (tileentity.getTileType().isValidBlock(chunk.getType(blockposition).getBlock())) { // Paper - reuse the chunk from above, do not look it up again
                             ((ITickable) tileentity).tick();
                         } else {
                             tileentity.w();
                         }
 
-                        gameprofilerfiller.exit();
                     } catch (Throwable throwable) {
                         if (throwable instanceof ThreadDeath) throw throwable; // Paper
                         // Paper start - Prevent tile entity and entity crashes
@@ -1019,7 +1008,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         }
 
         this.tickingTileEntities = false;
-        gameprofilerfiller.exitEnter("pendingBlockEntities");
         if (!this.tileEntityListPending.isEmpty()) {
             for (int i = 0; i < this.tileEntityListPending.size(); ++i) {
                 TileEntity tileentity1 = (TileEntity) this.tileEntityListPending.get(i);
@@ -1050,7 +1038,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
             this.tileEntityListPending.clear();
         }
 
-        gameprofilerfiller.exit();
         spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
@@ -1289,7 +1276,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     }
     public List<Entity> getEntities(@Nullable Entity entity, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super Entity> predicate, List<Entity> list) {
         // Tuinity end - add list parameter
-        this.getMethodProfiler().c("getEntities");
         int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
@@ -1310,7 +1296,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     }
 
     public <T extends Entity> List<T> a(@Nullable EntityTypes<T> entitytypes, AxisAlignedBB axisalignedbb, Predicate<? super T> predicate) {
-        this.getMethodProfiler().c("getEntities");
         int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
         int j = MathHelper.f((axisalignedbb.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
@@ -1332,7 +1317,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
     public <T extends Entity> List<T> getEntities(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super T> predicate) { return a(oclass, axisalignedbb, predicate); } // Paper - OBFHELPER
     @Override public <T extends Entity> List<T> a(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super T> predicate) {
-        this.getMethodProfiler().c("getEntities");
         int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
         int j = MathHelper.f((axisalignedbb.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
@@ -1355,7 +1339,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
     @Override
     public <T extends Entity> List<T> b(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super T> predicate) {
-        this.getMethodProfiler().c("getLoadedEntities");
         int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
         int j = MathHelper.f((axisalignedbb.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
@@ -1754,14 +1737,6 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         return false;
     }
 
-    public GameProfilerFiller getMethodProfiler() {
-        return (GameProfilerFiller) this.methodProfiler.get();
-    }
-
-    public Supplier<GameProfilerFiller> getMethodProfilerSupplier() {
-        return this.methodProfiler;
-    }
-
     public BiomeManager getBiomeManager() { return d(); } // Paper - OBFHELPER
     @Override public BiomeManager d() {
         return this.biomeManager;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTableRegistry.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTableRegistry.java
index 2e2924d3d6b585715d4949ff80153d49948731e0..8746a29c47301ec424d242527b4f3e1161d3d1d7 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTableRegistry.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTableRegistry.java
@@ -10,7 +10,6 @@ import java.util.function.Function;
 import net.minecraft.resources.MinecraftKey;
 import net.minecraft.server.packs.resources.IResourceManager;
 import net.minecraft.server.packs.resources.ResourceDataJson;
-import net.minecraft.util.profiling.GameProfilerFiller;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParameterSets;
 import org.apache.logging.log4j.LogManager;
@@ -33,7 +32,7 @@ public class LootTableRegistry extends ResourceDataJson {
         return (LootTable) this.keyToLootTable.getOrDefault(minecraftkey, LootTable.EMPTY);
     }
 
-    protected void a(Map<MinecraftKey, JsonElement> map, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller) {
+    protected void a(Map<MinecraftKey, JsonElement> map, IResourceManager iresourcemanager) {
         Builder<MinecraftKey, LootTable> builder = ImmutableMap.builder();
         JsonElement jsonelement = (JsonElement) map.remove(LootTables.a);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
index f5e98f184571a6639286563b2245ee2590b9380f..5479f523c38042e0a1fc58123930575b57ad2416 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
@@ -41,9 +41,8 @@ public class CraftRabbit extends CraftAnimals implements Rabbit {
         EntityRabbit entity = getHandle();
         if (getRabbitType() == Type.THE_KILLER_BUNNY) {
             // Reset goals and target finders.
-            World world = ((CraftWorld) this.getWorld()).getHandle();
-            entity.goalSelector = new PathfinderGoalSelector(world.getMethodProfilerSupplier());
-            entity.targetSelector = new PathfinderGoalSelector(world.getMethodProfilerSupplier());
+            entity.goalSelector = new PathfinderGoalSelector();
+            entity.targetSelector = new PathfinderGoalSelector();
             entity.initPathfinder();
             entity.initializePathFinderGoals();
         }
