From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kamillaova <54859825+Kamillaova@users.noreply.github.com>
Date: Mon, 5 Dec 2022 11:52:21 +0300
Subject: [PATCH] MC-Dev fixes


diff --git a/src/main/java/net/minecraft/server/CustomFunctionManager.java b/src/main/java/net/minecraft/server/CustomFunctionManager.java
index 0ca1dfa2ae1147417ff5e6e4f2161b263cec13f9..7deacf34ae4d673e9d083ddc67176b741790f68a 100644
--- a/src/main/java/net/minecraft/server/CustomFunctionManager.java
+++ b/src/main/java/net/minecraft/server/CustomFunctionManager.java
@@ -96,7 +96,7 @@ public class CustomFunctionManager implements IReloadListener {
                 return map;
             });
         });
-        CompletableFuture completablefuture2 = completablefuture.thenCombine(completablefuture1, Pair::of);
+        CompletableFuture<Pair<?, Map<MinecraftKey, CompletableFuture<CustomFunction>>>> completablefuture2 = completablefuture.thenCombine(completablefuture1, Pair::of);
 
         ireloadlistener_a.getClass();
         return completablefuture2.thenCompose(ireloadlistener_a::a).thenAcceptAsync((pair) -> {
diff --git a/src/main/java/net/minecraft/server/packs/resources/Reloadable.java b/src/main/java/net/minecraft/server/packs/resources/Reloadable.java
index 1690bf09f7a2c61e073c472501271228654bc430..162ff358f6f0c08a7b6e1eb1b0e48c2c614070ac 100644
--- a/src/main/java/net/minecraft/server/packs/resources/Reloadable.java
+++ b/src/main/java/net/minecraft/server/packs/resources/Reloadable.java
@@ -39,7 +39,7 @@ public class Reloadable<S> implements IReloadable {
         this.i.getClass();
         completablefuture.thenRun(atomicinteger::incrementAndGet);
         List<CompletableFuture<S>> list1 = Lists.newArrayList();
-        final CompletableFuture<?> completablefuture1 = completablefuture;
+        CompletableFuture<?> completablefuture1 = completablefuture;
 
         this.d = Sets.newHashSet(list);
 
@@ -48,6 +48,7 @@ public class Reloadable<S> implements IReloadable {
         for (Iterator iterator = list.iterator(); iterator.hasNext(); completablefuture1 = completablefuture2) {
             final IReloadListener ireloadlistener = (IReloadListener) iterator.next();
 
+            CompletableFuture<?> finalCompletablefuture = completablefuture1;
             completablefuture2 = reloadable_a.create(new IReloadListener.a() {
                 @Override
                 public <T> CompletableFuture<T> a(T t0) {
@@ -58,7 +59,7 @@ public class Reloadable<S> implements IReloadable {
                         }
 
                     });
-                    return Reloadable.this.b.thenCombine(completablefuture1, (unit, object) -> {
+                    return Reloadable.this.b.thenCombine(finalCompletablefuture, (unit, object) -> {
                         return t0;
                     });
                 }
diff --git a/src/main/java/net/minecraft/server/packs/resources/ResourceDataAbstract.java b/src/main/java/net/minecraft/server/packs/resources/ResourceDataAbstract.java
index d9b16032fa78ed80e5a2209e4082bc26d7b303d7..1422061ca21a956e9661d8571935f4f73b613bfb 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ResourceDataAbstract.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ResourceDataAbstract.java
@@ -10,11 +10,10 @@ public abstract class ResourceDataAbstract<T> implements IReloadListener {
 
     @Override
     public final CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller, GameProfilerFiller gameprofilerfiller1, Executor executor, Executor executor1) {
-        CompletableFuture completablefuture = CompletableFuture.supplyAsync(() -> {
+        CompletableFuture<T> completablefuture = CompletableFuture.supplyAsync(() -> {
             return this.b(iresourcemanager, gameprofilerfiller);
         }, executor);
 
-        ireloadlistener_a.getClass();
         return completablefuture.thenCompose(ireloadlistener_a::a).thenAcceptAsync((object) -> {
             this.a(object, iresourcemanager, gameprofilerfiller1);
         }, executor1);
diff --git a/src/main/java/net/minecraft/util/profiling/GameProfilerTick.java b/src/main/java/net/minecraft/util/profiling/GameProfilerTick.java
index d6e579e7cf40d677280e3489cd7f237d3c5a54f0..4e5f52b953c7735658fc050b0b365f120a4211eb 100644
--- a/src/main/java/net/minecraft/util/profiling/GameProfilerTick.java
+++ b/src/main/java/net/minecraft/util/profiling/GameProfilerTick.java
@@ -5,16 +5,18 @@ import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.function.LongSupplier;
 import javax.annotation.Nullable;
+
+import net.minecraft.SystemUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class GameProfilerTick {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    private final LongSupplier b;
-    private final long c;
+    private final LongSupplier b = SystemUtils.a; // wtf
+    private final long c = Long.MAX_VALUE; // wtf
     private int d;
-    private final File e;
+    private final File e = new File("."); // wtf
     private GameProfilerFillerActive f;
 
     public GameProfilerFiller a() {
diff --git a/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsFilled.java b/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsFilled.java
index 2495edaff5f1a19a051d662a292d94efc2b9547a..1402cc615dc54227503f8a053deb95cc3a6a24ba 100644
--- a/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsFilled.java
+++ b/src/main/java/net/minecraft/util/profiling/MethodProfilerResultsFilled.java
@@ -43,7 +43,7 @@ public class MethodProfilerResultsFilled implements MethodProfilerResults {
         }
     };
     private static final Splitter c = Splitter.on('\u001e');
-    private static final Comparator<Entry<String, MethodProfilerResultsFilled.a>> d = Entry.comparingByValue(Comparator.comparingLong((methodprofilerresultsfilled_a) -> {
+    private static final Comparator<Entry<String, MethodProfilerResultsFilled.a>> d = Entry.<String, MethodProfilerResultsFilled.a>comparingByValue(Comparator.comparingLong((methodprofilerresultsfilled_a) -> {
         return methodprofilerresultsfilled_a.b;
     })).reversed();
     private final Map<String, ? extends MethodProfilerResult> e;
diff --git a/src/main/java/net/minecraft/world/item/ItemCompass.java b/src/main/java/net/minecraft/world/item/ItemCompass.java
index b71c242cb321d9eb4168aa02c7753ae818800532..51b2d236e23a18b75cb75a8afe57db43464641d0 100644
--- a/src/main/java/net/minecraft/world/item/ItemCompass.java
+++ b/src/main/java/net/minecraft/world/item/ItemCompass.java
@@ -5,6 +5,7 @@ import java.util.Optional;
 import net.minecraft.core.BlockPosition;
 import net.minecraft.nbt.DynamicOpsNBT;
 import net.minecraft.nbt.GameProfileSerializer;
+import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.level.WorldServer;
@@ -99,10 +100,9 @@ public class ItemCompass extends Item implements ItemVanishable {
 
     private void a(ResourceKey<World> resourcekey, BlockPosition blockposition, NBTTagCompound nbttagcompound) {
         nbttagcompound.set("LodestonePos", GameProfileSerializer.a(blockposition));
-        DataResult dataresult = World.f.encodeStart(DynamicOpsNBT.a, resourcekey);
+        DataResult<NBTBase> dataresult = World.f.encodeStart(DynamicOpsNBT.a, resourcekey);
         Logger logger = ItemCompass.LOGGER;
 
-        logger.getClass();
         dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
             nbttagcompound.set("LodestoneDimension", nbtbase);
         });
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeBase.java b/src/main/java/net/minecraft/world/level/biome/BiomeBase.java
index c4fb051739c1c186c1574185e0653f513755987d..97480f3e05ffacbc9880e7bf7064e02f794704b8 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeBase.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeBase.java
@@ -397,9 +397,9 @@ public final class BiomeBase {
         }
     }
 
-    public static class c {
+    public static class _c {
 
-        public static final Codec<BiomeBase.c> a = RecordCodecBuilder.create((instance) -> {
+        public static final Codec<_c> a = RecordCodecBuilder.create((instance) -> {
             return instance.group(Codec.floatRange(-2.0F, 2.0F).fieldOf("temperature").forGetter((biomebase_c) -> {
                 return biomebase_c.b;
             }), Codec.floatRange(-2.0F, 2.0F).fieldOf("humidity").forGetter((biomebase_c) -> {
@@ -410,7 +410,7 @@ public final class BiomeBase {
                 return biomebase_c.e;
             }), Codec.floatRange(0.0F, 1.0F).fieldOf("offset").forGetter((biomebase_c) -> {
                 return biomebase_c.f;
-            })).apply(instance, BiomeBase.c::new);
+            })).apply(instance, _c::new);
         });
         private final float b;
         private final float c;
@@ -418,7 +418,7 @@ public final class BiomeBase {
         private final float e;
         private final float f;
 
-        public c(float f, float f1, float f2, float f3, float f4) {
+        public _c(float f, float f1, float f2, float f3, float f4) {
             this.b = f;
             this.c = f1;
             this.d = f2;
@@ -430,7 +430,7 @@ public final class BiomeBase {
             if (this == object) {
                 return true;
             } else if (object != null && this.getClass() == object.getClass()) {
-                BiomeBase.c biomebase_c = (BiomeBase.c) object;
+                _c biomebase_c = (_c) object;
 
                 return Float.compare(biomebase_c.b, this.b) != 0 ? false : (Float.compare(biomebase_c.c, this.c) != 0 ? false : (Float.compare(biomebase_c.d, this.d) != 0 ? false : Float.compare(biomebase_c.e, this.e) == 0));
             } else {
@@ -447,7 +447,7 @@ public final class BiomeBase {
             return i;
         }
 
-        public float a(BiomeBase.c biomebase_c) {
+        public float a(_c biomebase_c) {
             return (this.b - biomebase_c.b) * (this.b - biomebase_c.b) + (this.c - biomebase_c.c) * (this.c - biomebase_c.c) + (this.d - biomebase_c.d) * (this.d - biomebase_c.d) + (this.e - biomebase_c.e) * (this.e - biomebase_c.e) + (this.f - biomebase_c.f) * (this.f - biomebase_c.f);
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/biome/WorldChunkManagerMultiNoise.java b/src/main/java/net/minecraft/world/level/biome/WorldChunkManagerMultiNoise.java
index 5287aec4c384c6cea76334ae1d8dc99070e8f43e..6682c749766e6d80177de1fd707e2db862c7c79f 100644
--- a/src/main/java/net/minecraft/world/level/biome/WorldChunkManagerMultiNoise.java
+++ b/src/main/java/net/minecraft/world/level/biome/WorldChunkManagerMultiNoise.java
@@ -27,53 +27,53 @@ import net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal;
 
 public class WorldChunkManagerMultiNoise extends WorldChunkManager {
 
-    private static final WorldChunkManagerMultiNoise.a g = new WorldChunkManagerMultiNoise.a(-7, ImmutableList.of(1.0D, 1.0D));
+    private static final _a g = new _a(-7, ImmutableList.of(1.0D, 1.0D));
     public static final MapCodec<WorldChunkManagerMultiNoise> e = RecordCodecBuilder.mapCodec((instance) -> {
         return instance.group(Codec.LONG.fieldOf("seed").forGetter((worldchunkmanagermultinoise) -> {
             return worldchunkmanagermultinoise.r;
-        }), RecordCodecBuilder.create((instance1) -> {
-            return instance1.group(BiomeBase.c.a.fieldOf("parameters").forGetter(Pair::getFirst), BiomeBase.d.fieldOf("biome").forGetter(Pair::getSecond)).apply(instance1, Pair::of);
+        }), RecordCodecBuilder.<Pair<BiomeBase._c, Supplier<BiomeBase>>>create((instance1) -> {
+            return instance1.group(BiomeBase._c.a.fieldOf("parameters").forGetter(Pair::getFirst), BiomeBase.d.fieldOf("biome").forGetter(Pair::getSecond)).apply(instance1, Pair::of);
         }).listOf().fieldOf("biomes").forGetter((worldchunkmanagermultinoise) -> {
             return worldchunkmanagermultinoise.p;
-        }), WorldChunkManagerMultiNoise.a.a.fieldOf("temperature_noise").forGetter((worldchunkmanagermultinoise) -> {
+        }), WorldChunkManagerMultiNoise._a.a.fieldOf("temperature_noise").forGetter((worldchunkmanagermultinoise) -> {
             return worldchunkmanagermultinoise.h;
-        }), WorldChunkManagerMultiNoise.a.a.fieldOf("humidity_noise").forGetter((worldchunkmanagermultinoise) -> {
+        }), WorldChunkManagerMultiNoise._a.a.fieldOf("humidity_noise").forGetter((worldchunkmanagermultinoise) -> {
             return worldchunkmanagermultinoise.i;
-        }), WorldChunkManagerMultiNoise.a.a.fieldOf("altitude_noise").forGetter((worldchunkmanagermultinoise) -> {
+        }), WorldChunkManagerMultiNoise._a.a.fieldOf("altitude_noise").forGetter((worldchunkmanagermultinoise) -> {
             return worldchunkmanagermultinoise.j;
-        }), WorldChunkManagerMultiNoise.a.a.fieldOf("weirdness_noise").forGetter((worldchunkmanagermultinoise) -> {
+        }), WorldChunkManagerMultiNoise._a.a.fieldOf("weirdness_noise").forGetter((worldchunkmanagermultinoise) -> {
             return worldchunkmanagermultinoise.k;
         })).apply(instance, WorldChunkManagerMultiNoise::new);
     });
-    public static final Codec<WorldChunkManagerMultiNoise> f = Codec.mapEither(WorldChunkManagerMultiNoise.c.a, WorldChunkManagerMultiNoise.e).xmap((either) -> {
-        return (WorldChunkManagerMultiNoise) either.map(WorldChunkManagerMultiNoise.c::d, Function.identity());
+    public static final Codec<WorldChunkManagerMultiNoise> f = Codec.mapEither(WorldChunkManagerMultiNoise._c.a, WorldChunkManagerMultiNoise.e).xmap((either) -> {
+        return (WorldChunkManagerMultiNoise) either.map(WorldChunkManagerMultiNoise._c::d, Function.identity());
     }, (worldchunkmanagermultinoise) -> {
         return (Either) worldchunkmanagermultinoise.d().map(Either::left).orElseGet(() -> {
             return Either.right(worldchunkmanagermultinoise);
         });
     }).codec();
-    private final WorldChunkManagerMultiNoise.a h;
-    private final WorldChunkManagerMultiNoise.a i;
-    private final WorldChunkManagerMultiNoise.a j;
-    private final WorldChunkManagerMultiNoise.a k;
+    private final _a h;
+    private final _a i;
+    private final _a j;
+    private final _a k;
     private final NoiseGeneratorNormal l;
     private final NoiseGeneratorNormal m;
     private final NoiseGeneratorNormal n;
     private final NoiseGeneratorNormal o;
-    private final List<Pair<BiomeBase.c, Supplier<BiomeBase>>> p;
+    private final List<Pair<BiomeBase._c, Supplier<BiomeBase>>> p;
     private final boolean q;
     private final long r;
-    private final Optional<Pair<IRegistry<BiomeBase>, WorldChunkManagerMultiNoise.b>> s;
+    private final Optional<Pair<IRegistry<BiomeBase>, _b>> s;
 
-    private WorldChunkManagerMultiNoise(long i, List<Pair<BiomeBase.c, Supplier<BiomeBase>>> list, Optional<Pair<IRegistry<BiomeBase>, WorldChunkManagerMultiNoise.b>> optional) {
+    private WorldChunkManagerMultiNoise(long i, List<Pair<BiomeBase._c, Supplier<BiomeBase>>> list, Optional<Pair<IRegistry<BiomeBase>, _b>> optional) {
         this(i, list, WorldChunkManagerMultiNoise.g, WorldChunkManagerMultiNoise.g, WorldChunkManagerMultiNoise.g, WorldChunkManagerMultiNoise.g, optional);
     }
 
-    private WorldChunkManagerMultiNoise(long i, List<Pair<BiomeBase.c, Supplier<BiomeBase>>> list, WorldChunkManagerMultiNoise.a worldchunkmanagermultinoise_a, WorldChunkManagerMultiNoise.a worldchunkmanagermultinoise_a1, WorldChunkManagerMultiNoise.a worldchunkmanagermultinoise_a2, WorldChunkManagerMultiNoise.a worldchunkmanagermultinoise_a3) {
+    private WorldChunkManagerMultiNoise(long i, List<Pair<BiomeBase._c, Supplier<BiomeBase>>> list, _a worldchunkmanagermultinoise_a, _a worldchunkmanagermultinoise_a1, _a worldchunkmanagermultinoise_a2, _a worldchunkmanagermultinoise_a3) {
         this(i, list, worldchunkmanagermultinoise_a, worldchunkmanagermultinoise_a1, worldchunkmanagermultinoise_a2, worldchunkmanagermultinoise_a3, Optional.empty());
     }
 
-    private WorldChunkManagerMultiNoise(long i, List<Pair<BiomeBase.c, Supplier<BiomeBase>>> list, WorldChunkManagerMultiNoise.a worldchunkmanagermultinoise_a, WorldChunkManagerMultiNoise.a worldchunkmanagermultinoise_a1, WorldChunkManagerMultiNoise.a worldchunkmanagermultinoise_a2, WorldChunkManagerMultiNoise.a worldchunkmanagermultinoise_a3, Optional<Pair<IRegistry<BiomeBase>, WorldChunkManagerMultiNoise.b>> optional) {
+    private WorldChunkManagerMultiNoise(long i, List<Pair<BiomeBase._c, Supplier<BiomeBase>>> list, _a worldchunkmanagermultinoise_a, _a worldchunkmanagermultinoise_a1, _a worldchunkmanagermultinoise_a2, _a worldchunkmanagermultinoise_a3, Optional<Pair<IRegistry<BiomeBase>, _b>> optional) {
         super(list.stream().map(Pair::getSecond));
         this.r = i;
         this.s = optional;
@@ -94,49 +94,49 @@ public class WorldChunkManagerMultiNoise extends WorldChunkManager {
         return WorldChunkManagerMultiNoise.f;
     }
 
-    private Optional<WorldChunkManagerMultiNoise.c> d() {
+    private Optional<_c> d() {
         return this.s.map((pair) -> {
-            return new WorldChunkManagerMultiNoise.c((WorldChunkManagerMultiNoise.b) pair.getSecond(), (IRegistry) pair.getFirst(), this.r);
+            return new _c((_b) pair.getSecond(), (IRegistry) pair.getFirst(), this.r);
         });
     }
 
     @Override
     public BiomeBase getBiome(int i, int j, int k) {
         int l = this.q ? j : 0;
-        BiomeBase.c biomebase_c = new BiomeBase.c((float) this.l.a((double) i, (double) l, (double) k), (float) this.m.a((double) i, (double) l, (double) k), (float) this.n.a((double) i, (double) l, (double) k), (float) this.o.a((double) i, (double) l, (double) k), 0.0F);
+        BiomeBase._c biomebase_c = new BiomeBase._c((float) this.l.a((double) i, (double) l, (double) k), (float) this.m.a((double) i, (double) l, (double) k), (float) this.n.a((double) i, (double) l, (double) k), (float) this.o.a((double) i, (double) l, (double) k), 0.0F);
 
         return (BiomeBase) this.p.stream().min(Comparator.comparing((pair) -> {
-            return ((BiomeBase.c) pair.getFirst()).a(biomebase_c);
+            return ((BiomeBase._c) pair.getFirst()).a(biomebase_c);
         })).map(Pair::getSecond).map(Supplier::get).orElse(BiomeRegistry.b);
     }
 
     public boolean b(long i) {
-        return this.r == i && this.s.isPresent() && Objects.equals(((Pair) this.s.get()).getSecond(), WorldChunkManagerMultiNoise.b.a);
+        return this.r == i && this.s.isPresent() && Objects.equals(((Pair) this.s.get()).getSecond(), WorldChunkManagerMultiNoise._b.a);
     }
 
-    public static class b {
+    public static class _b {
 
-        private static final Map<MinecraftKey, WorldChunkManagerMultiNoise.b> b = Maps.newHashMap();
-        public static final WorldChunkManagerMultiNoise.b a = new WorldChunkManagerMultiNoise.b(new MinecraftKey("nether"), (worldchunkmanagermultinoise_b, iregistry, olong) -> {
-            return new WorldChunkManagerMultiNoise(olong, ImmutableList.of(Pair.of(new BiomeBase.c(0.0F, 0.0F, 0.0F, 0.0F, 0.0F), () -> {
+        private static final Map<MinecraftKey, _b> b = Maps.newHashMap();
+        public static final _b a = new _b(new MinecraftKey("nether"), (worldchunkmanagermultinoise_b, iregistry, olong) -> {
+            return new WorldChunkManagerMultiNoise(olong, ImmutableList.of(Pair.of(new BiomeBase._c(0.0F, 0.0F, 0.0F, 0.0F, 0.0F), () -> {
                 return (BiomeBase) iregistry.d(Biomes.NETHER_WASTES);
-            }), Pair.of(new BiomeBase.c(0.0F, -0.5F, 0.0F, 0.0F, 0.0F), () -> {
+            }), Pair.of(new BiomeBase._c(0.0F, -0.5F, 0.0F, 0.0F, 0.0F), () -> {
                 return (BiomeBase) iregistry.d(Biomes.SOUL_SAND_VALLEY);
-            }), Pair.of(new BiomeBase.c(0.4F, 0.0F, 0.0F, 0.0F, 0.0F), () -> {
+            }), Pair.of(new BiomeBase._c(0.4F, 0.0F, 0.0F, 0.0F, 0.0F), () -> {
                 return (BiomeBase) iregistry.d(Biomes.CRIMSON_FOREST);
-            }), Pair.of(new BiomeBase.c(0.0F, 0.5F, 0.0F, 0.0F, 0.375F), () -> {
+            }), Pair.of(new BiomeBase._c(0.0F, 0.5F, 0.0F, 0.0F, 0.375F), () -> {
                 return (BiomeBase) iregistry.d(Biomes.WARPED_FOREST);
-            }), Pair.of(new BiomeBase.c(-0.5F, 0.0F, 0.0F, 0.0F, 0.175F), () -> {
+            }), Pair.of(new BiomeBase._c(-0.5F, 0.0F, 0.0F, 0.0F, 0.175F), () -> {
                 return (BiomeBase) iregistry.d(Biomes.BASALT_DELTAS);
             })), Optional.of(Pair.of(iregistry, worldchunkmanagermultinoise_b)));
         });
         private final MinecraftKey c;
-        private final Function3<WorldChunkManagerMultiNoise.b, IRegistry<BiomeBase>, Long, WorldChunkManagerMultiNoise> d;
+        private final Function3<_b, IRegistry<BiomeBase>, Long, WorldChunkManagerMultiNoise> d;
 
-        public b(MinecraftKey minecraftkey, Function3<WorldChunkManagerMultiNoise.b, IRegistry<BiomeBase>, Long, WorldChunkManagerMultiNoise> function3) {
+        public _b(MinecraftKey minecraftkey, Function3<_b, IRegistry<BiomeBase>, Long, WorldChunkManagerMultiNoise> function3) {
             this.c = minecraftkey;
             this.d = function3;
-            WorldChunkManagerMultiNoise.b.b.put(minecraftkey, this);
+            WorldChunkManagerMultiNoise._b.b.put(minecraftkey, this);
         }
 
         public WorldChunkManagerMultiNoise a(IRegistry<BiomeBase> iregistry, long i) {
@@ -144,29 +144,29 @@ public class WorldChunkManagerMultiNoise extends WorldChunkManager {
         }
     }
 
-    static final class c {
+    static final class _c {
 
-        public static final MapCodec<WorldChunkManagerMultiNoise.c> a = RecordCodecBuilder.mapCodec((instance) -> {
+        public static final MapCodec<_c> a = RecordCodecBuilder.mapCodec((instance) -> {
             return instance.group(MinecraftKey.a.flatXmap((minecraftkey) -> {
-                return (DataResult) Optional.ofNullable(WorldChunkManagerMultiNoise.b.b.get(minecraftkey)).map(DataResult::success).orElseGet(() -> {
+                return Optional.ofNullable(WorldChunkManagerMultiNoise._b.b.get(minecraftkey)).map(DataResult::success).orElseGet(() -> {
                     return DataResult.error("Unknown preset: " + minecraftkey);
                 });
             }, (worldchunkmanagermultinoise_b) -> {
                 return DataResult.success(worldchunkmanagermultinoise_b.c);
-            }).fieldOf("preset").stable().forGetter(WorldChunkManagerMultiNoise.c::a), RegistryLookupCodec.a(IRegistry.ay).forGetter(WorldChunkManagerMultiNoise.c::b), Codec.LONG.fieldOf("seed").stable().forGetter(WorldChunkManagerMultiNoise.c::c)).apply(instance, instance.stable(WorldChunkManagerMultiNoise.c::new));
+            }).fieldOf("preset").stable().forGetter(WorldChunkManagerMultiNoise._c::a), RegistryLookupCodec.a(IRegistry.ay).forGetter(WorldChunkManagerMultiNoise._c::b), Codec.LONG.fieldOf("seed").stable().forGetter(WorldChunkManagerMultiNoise._c::c)).apply(instance, instance.stable(_c::new));
         });
-        private final WorldChunkManagerMultiNoise.b b;
+        private final _b _b;
         private final IRegistry<BiomeBase> c;
         private final long d;
 
-        private c(WorldChunkManagerMultiNoise.b worldchunkmanagermultinoise_b, IRegistry<BiomeBase> iregistry, long i) {
-            this.b = worldchunkmanagermultinoise_b;
+        private _c(_b worldchunkmanagermultinoise_b, IRegistry<BiomeBase> iregistry, long i) {
+            this._b = worldchunkmanagermultinoise_b;
             this.c = iregistry;
             this.d = i;
         }
 
-        public WorldChunkManagerMultiNoise.b a() {
-            return this.b;
+        public _b a() {
+            return this._b;
         }
 
         public IRegistry<BiomeBase> b() {
@@ -178,19 +178,19 @@ public class WorldChunkManagerMultiNoise extends WorldChunkManager {
         }
 
         public WorldChunkManagerMultiNoise d() {
-            return this.b.a(this.c, this.d);
+            return this._b.a(this.c, this.d);
         }
     }
 
-    static class a {
+    static class _a {
 
         private final int b;
         private final DoubleList c;
-        public static final Codec<WorldChunkManagerMultiNoise.a> a = RecordCodecBuilder.create((instance) -> {
-            return instance.group(Codec.INT.fieldOf("firstOctave").forGetter(WorldChunkManagerMultiNoise.a::a), Codec.DOUBLE.listOf().fieldOf("amplitudes").forGetter(WorldChunkManagerMultiNoise.a::b)).apply(instance, WorldChunkManagerMultiNoise.a::new);
+        public static final Codec<_a> a = RecordCodecBuilder.create((instance) -> {
+            return instance.group(Codec.INT.fieldOf("firstOctave").forGetter(WorldChunkManagerMultiNoise._a::a), Codec.DOUBLE.listOf().fieldOf("amplitudes").forGetter(WorldChunkManagerMultiNoise._a::b)).apply(instance, _a::new);
         });
 
-        public a(int i, List<Double> list) {
+        public _a(int i, List<Double> list) {
             this.b = i;
             this.c = new DoubleArrayList(list);
         }
diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionManager.java b/src/main/java/net/minecraft/world/level/dimension/DimensionManager.java
index be6d63bcf15027e02a0bfbee0792c24f2300b27e..cb4d785d2e908bb9ad446ca28c89ba5668f645aa 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionManager.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionManager.java
@@ -156,7 +156,7 @@ public class DimensionManager {
     }
 
     private static ChunkGenerator b(IRegistry<BiomeBase> iregistry, IRegistry<GeneratorSettingBase> iregistry1, long i) {
-        return new ChunkGeneratorAbstract(WorldChunkManagerMultiNoise.b.a.a(iregistry, i), i, () -> {
+        return new ChunkGeneratorAbstract(WorldChunkManagerMultiNoise._b.a.a(iregistry, i), i, () -> {
             return (GeneratorSettingBase) iregistry1.d(GeneratorSettingBase.e);
         });
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/carver/WorldGenCarverAbstract.java b/src/main/java/net/minecraft/world/level/levelgen/carver/WorldGenCarverAbstract.java
index fd28dcd83b54027e2d51ecf1864b3406cb9b8cc3..176731e2858d474715a8825ff19907ff44f372a8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/carver/WorldGenCarverAbstract.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/carver/WorldGenCarverAbstract.java
@@ -41,7 +41,7 @@ public abstract class WorldGenCarverAbstract<C extends WorldGenCarverConfigurati
     protected final int l;
 
     private static <C extends WorldGenCarverConfiguration, F extends WorldGenCarverAbstract<C>> F a(String s, F f0) {
-        return (WorldGenCarverAbstract) IRegistry.a(IRegistry.CARVER, s, (Object) f0);
+        return IRegistry.a(IRegistry.CARVER, s, f0);
     }
 
     public WorldGenCarverAbstract(Codec<C> codec, int i) {
